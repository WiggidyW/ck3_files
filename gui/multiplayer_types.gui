types JominiServerBrowser {

	type JominiMultiplayerPushButton = button {
		block "jomini_multiplayer_push_button"
		{
			texture = "gfx/editor_gui/editor_button.dds"
			gfxtype = framedbuttongfx
			spriteType = CorneredStretched
			spriteborder = { 4 4 }
			effectname = "NoHighlight"
			framesize = { 16 16 }
			upframe = 1
			downframe = 2
			overframe = 3
			disableframe = 4
			intersectionmask = yes
		}
	}

	type JominiServerBrowserWindow = window {
		name = "JominiServerBrowser"
		size = { 800 92% }		

		movable = no

		state = {
			name = _show

			using = Animation_FadeIn_Standard
			using = Sound_WindowShow_Standard
		}

		state = {
			name = _hide

			using = Animation_FadeOut_Standard
			using = Sound_WindowHide_Standard
		}

		block "serverbrowser_background" {}

		vbox = {
			spacing = 5
			using = Window_Margins_Sidebar

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "JOMINI_MULTIPLAYER_SERVER_BROWSER_HEADER"
				}

				blockoverride "button_close" {
					visible = no
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_top = 15
				margin_left = 10
				spacing = 10

				### PUBLIC GAME ###
				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5
					margin = { 5 0 }

					text_single = {
						text = "JOMINI_MULTIPLAYER_PUBLIC_GAMES"
						layoutpolicy_horizontal = expanding
						align = left
						default_format = "#low"
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						JominiMultiplayerCheckbutton = {
							blockoverride "checkbutton"
							{
								onclick = "[JominiServerBrowserGui.ToggleHasPasswordFilter]"
								checked = "[Not( JominiServerBrowserGui.IsHasPasswordFilterSet )]"
							}

							blockoverride "label"
							{
								text = "JOMINI_MULTIPLAYER_GUI_SERVER_FILTER_LABEL_HAS_PASSWORD"
							}
						}

						JominiMultiplayerCheckbutton = {
							blockoverride "checkbutton"
							{
								onclick = "[JominiServerBrowserGui.ToggleSameVersionFilter]"
								checked = "[JominiServerBrowserGui.IsSameVersionFilterSet]"
							}

							blockoverride "label"
							{
								text = "JOMINI_MULTIPLAYER_GUI_SERVER_FILTER_LABEL_SAME_VERSION"
							}
						}

						JominiMultiplayerCheckbutton = {
							visible = "[JominiMultiplayerIsCrossplayFilterAvailable]"

							blockoverride "checkbutton"
							{
								onclick = "[JominiServerBrowserGui.ToggleCrossPlatformFilter]"
								checked = "[Not(JominiServerBrowserGui.IsCrossPlatformFilterSet)]"
								enabled = "[JominiMultiplayerIsCrossplayEnabled]"
							}

							blockoverride "label"
							{
								text = "MULTIPLAYER_GUI_PUBLIC_MICROSOFT_ONLY"
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5

							JominiMultiplayerTextbox = {
								block "serverbrowser_emptyspace" {
									text = "JOMINI_MULTIPLAYER_GUI_SERVER_SEARCH"
									layoutpolicy_horizontal = fixed
									autoresize = yes
									default_format = "#medium"
								}
							}

							JominiMultiplayerEditbox = {
								ontextedited = "[JominiServerBrowserGui.OnFilterTextEdit]"
								block "serverbrowser_searchbox" {}
							}
						}

						button_group = {
							onclick = "[JominiServerBrowserGui.RefreshServers]"

							hbox = {
								spacing = 5
								text_single = {
									text = "REFRESH"
								}

								button_change = {
									name = "scan_button"
								}
							}
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5
					margin_top = 20
					margin_left = 10

					### SERVER/GAME NAME ###
					button_standard_list = {
						size = { 260 33 }
						onclick = "[JominiServerBrowserGui.Sort( 'name' )]"
						tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_TT_SERVER_NAME"
						using = tooltip_ne

						hbox = {
							spacing = 5
							margin_left = 10

							text_single = {
								layoutpolicy_vertical = expanding
								align = nobaseline
								text = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_LABEL_SERVER_NAME"
								max_width = 250
							}

							expand = {}

							vbox = {
								layoutpolicy_vertical = expanding

								JominiMultiplayerSortButtonAsc = {
									visible = "[And( JominiServerBrowserGui.IsSortAscending, JominiServerBrowserGui.IsSortedBy( 'name' ) )]"
								}

								JominiMultiplayerSortButtonDesc = {
									visible = "[And( Not( JominiServerBrowserGui.IsSortAscending ), JominiServerBrowserGui.IsSortedBy( 'name' ) )]"
								}
							}
						}
					}

					### PLAYERS ###
					button_standard_list = {
						size = { 140 33 }
						onclick = "[JominiServerBrowserGui.Sort( 'players_count' )]"
						tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_TT_PLAYERS"
						using = tooltip_ne

						hbox = {
							spacing = 5
							margin_left = 10

							text_single = {
								layoutpolicy_vertical = expanding
								align = nobaseline
								text = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_LABEL_PLAYERS"
							}

							expand = {}

							vbox = {
								layoutpolicy_vertical = expanding

								JominiMultiplayerSortButtonAsc = {
									visible = "[And( JominiServerBrowserGui.IsSortAscending, JominiServerBrowserGui.IsSortedBy( 'players_count' ) )]"
								}

								JominiMultiplayerSortButtonDesc = {
									visible = "[And( Not( JominiServerBrowserGui.IsSortAscending ), JominiServerBrowserGui.IsSortedBy( 'players_count' ) )]"
								}
							}
						}
					}

					# ### STATUS ###
					# button_standard_list = {
					# 	size = { 150 33 }
					# 	onclick = "[JominiServerBrowserGui.Sort( 'status' )]"
					# 	tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_TT_STATUS"
					# 	using = tooltip_ne

					# 	hbox = {
					# 		spacing = 5
					# 		margin = { 5 0 }

					# 		text_single = {
					# 			layoutpolicy_vertical = expanding
					# 			align = nobaseline
					# 			text = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_LABEL_STATUS"
					# 		}

					# 		expand = {}

					# 		vbox = {
					# 			layoutpolicy_vertical = expanding

					# 			JominiMultiplayerSortButtonAsc = {
					# 				visible = "[And( JominiServerBrowserGui.IsSortAscending, JominiServerBrowserGui.IsSortedBy( 'status' ) )]"
					# 			}

					# 			JominiMultiplayerSortButtonDesc = {
					# 				visible = "[And( Not( JominiServerBrowserGui.IsSortAscending ), JominiServerBrowserGui.IsSortedBy( 'status' ) )]"
					# 			}
					# 		}
					# 	}
					# }

					### CHECKSUM ###
					button_standard_list = {
						size = { 150 33 }
						onclick = "[JominiServerBrowserGui.Sort( 'version' )]"
						tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_TT_VERSION"
						using = tooltip_ne

						hbox = {
							spacing = 5
							margin_left = 10

							text_single = {
								layoutpolicy_vertical = expanding
								minimumsize = { 70 0 }
								align = nobaseline
								text = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_LABEL_VERSION"
							}

							expand = {}

							vbox = {
								layoutpolicy_vertical = expanding

								JominiMultiplayerSortButtonAsc = {
									visible = "[And( JominiServerBrowserGui.IsSortAscending, JominiServerBrowserGui.IsSortedBy( 'version' ) )]"
								}

								JominiMultiplayerSortButtonDesc = {
									visible = "[And( Not( JominiServerBrowserGui.IsSortAscending ), JominiServerBrowserGui.IsSortedBy( 'version' ) )]"
								}
							}
						}
					}

					### PASSWORD ###
					button_standard_list = {
						size = { 85 33 }
						onclick = "[JominiServerBrowserGui.Sort( 'has_password' )]"
						tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_TT_PASSWORD"
						using = tooltip_ne

						hbox = {
							spacing = 5
							margin_left = 10

							icon = {
								texture = "gfx/interface/frontend/icon_has_password.dds"
								size = { 30 30 }
							}

							expand = {}

							vbox = {
								layoutpolicy_vertical = expanding

								JominiMultiplayerSortButtonAsc = {
									visible = "[And( JominiServerBrowserGui.IsSortAscending, JominiServerBrowserGui.IsSortedBy( 'has_password' ) )]"
								}

								JominiMultiplayerSortButtonDesc = {
									visible = "[And( Not( JominiServerBrowserGui.IsSortAscending ), JominiServerBrowserGui.IsSortedBy( 'has_password' ) )]"
								}
							}
						}
					}

					spacer = {
						size = { 105 1 }
					}
				}

				scrollbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content"
					{
						vbox = {
							datamodel = "[JominiServerBrowserGui.AccessServers]"

							item = {
								vbox = {
									layoutpolicy_horizontal = expanding
									spacing = 5

									hbox = {
										spacing = 5
										margin_left = 5

										widget = {
											size = { 260 22 }

											text_single = {
												max_width = 260
												text = "[JominiServer.GetName]"
												align = nobaseline
												default_format = "#high"
											}
										}

										widget = {
											size = { 140 22 }

											text_single = {
												max_width = 140
												text = "[JominiServer.GetNumPlayers] / [JominiServer.GetMaxPlayers]"
												align = nobaseline
												default_format = "#high"
											}
										}

										### CHECKSUM ###
										widget = {
											size = { 155 22 }

											text_single = {
												max_width = 150
												text = "[JominiServer.GetVersion]"
												align = nobaseline
												default_format = "#high"
											}
										}

										widget = {
											size = { 70 30 }

											hbox = {
												minimumsize = { 65 0 }
												icon = {
													texture = "gfx/interface/frontend/icon_has_password.dds"
													# visible = "[JominiServer.GetHasPassword]"
													tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_PASSWORD_PROTECTED_TOOLTIP"
													size = { 30 30 }
												}

												expand = {}
											}
										}

										button_group = {
											size = { 110 30 }
											onclick = "[JominiServer.Join]"

											hbox = {
												expand = {}

												text_single = {
													text = "JOMINI_MULTIPLAYER_GUI_SERVER_BROWSER_JOIN_BUTTON_IN_LIST"
													align = left|nobaseline
													default_format = "#high"
													max_width = 130
												}

												button_play = {
													enabled = "[JominiServer.IsSameVersion]"

													tooltip_enabled = "[Not(JominiServer.IsSameVersion)]"
													tooltip = "JOMINI_MULTIPLAYER_GUI_VERSION_MISMATCH_SERVER_BROWSER"
												}
											}
										}
									}

									divider_light = {
										layoutpolicy_horizontal = expanding
									}
								}
							}
						}
					}

					blockoverride "scrollbox_empty"
					{
						text = "JOMINI_MULTIPLAYER_SERVER_BROWSER_EMPTY"
						layoutpolicy_vertical = expanding
						visible = "[Or( IsDataModelEmpty( JominiServerBrowserGui.AccessServers ), JominiServerBrowserGui.IsRefreshing )]"
					}
				}

				### PRIVATE GAME ####
				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5
					margin = { 5 0 }

					text_single = {
						text = "JOMINI_MULTIPLAYER_JOIN_PRIVATE_GAMES"
						layoutpolicy_horizontal = expanding
						align = left
						default_format = "#low"
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5

							JominiMultiplayerTextbox = {
								text = "JOMINI_MULTIPLAYER_GUI_SERVER_BROWSER_ID_LABEL"
								autoresize = yes
								default_format = "#medium"
							}

							JominiMultiplayerEditbox = {
								name = "server_id_editbox"
							}
						}

						button_normal = {
							texture = "gfx/interface/frontend/icon_copy.dds"
							size = { 30 30 }

							onclick = "[JominiServerBrowserGui.SetServerId]"
							tooltip = "MULTIPLAYER_GUI_SERVER_BROWSER_PASTE_ID"

							gfxtype = framedbuttongfx
							effectname = "NoHighlight"
							upframe = 1
							overframe = 2
							downframe = 3
							framesize = { 80 80 }
						}

						button_standard = {
							text = "JOIN"
							minimumsize = { 220 0 }
							onclick = "[JominiServerBrowserGui.JoinServerWithId]"
							block "serverbrowser_join_server" {}
						}
					}

				}
			}
		}
	}

	type JominiJoinServerDialogWindow = window {
		name = "JominiJoinServerDialog"
		modal = yes
		modality = all

		position = { 0 0 }
		parentanchor = center
		widgetanchor = center

		size = { 300 75 }
		using = Window_Background_Popup

		vbox = {
			spacing = 10
			restrictparent_min = yes
			using = Window_Margins


			hbox = {
				spacing = 10
				layoutpolicy_horizontal = expanding

				JominiMultiplayerTextbox = {
					text = "JOMINI_MULTIPLAYER_GUI_POPUP_PASSWORD"
					autoresize = yes
				}

				JominiMultiplayerEditbox = {
					name = "password"
					password = yes
					onreturnpressed = "[JominiPasswordPopup.OnSubmit]"
					layoutpolicy_horizontal = expanding
				}
			}

			expand = {}

			hbox = {
				spacing = 10
				layoutpolicy_horizontal = expanding

				button_standard = {
					text = "JOMINI_MULTIPLAYER_GUI_POPUP_DECLINE"
					layoutpolicy_horizontal = expanding

					onclick = "[JominiPasswordPopup.OnDecline]"
					shortcut = close_window
				}

				button_primary = {
					text = "JOMINI_MULTIPLAYER_GUI_POPUP_SUBMIT"
					layoutpolicy_horizontal = expanding

					onclick = "[JominiPasswordPopup.OnSubmit]"
				}
			}
		}
	}
}

types JominiMultiplayerIngame {
	type JominiMultiplayerJoinRequest = window {
		name = "multiplayer_join_request_dialog"
		visible = "[JominiHasPlayerJoinRequests]"
		layer = confirmation		

		size = { 800 300 }
		widgetanchor = center
		parentanchor = center

		state = {
			name = _show
			using = Animation_FadeIn_Quick
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		using = Window_Background_Popup

		vbox = {
			using = Window_Margins
			spacing = 10

			header_standard = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "JOMINI_MULTIPLAYER_GUI_PLAYER_JOIN_REQUEST"
				}

				blockoverride "button_close"
				{
					visible = no
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					vbox = {
						layoutpolicy_horizontal = expanding
						datamodel = "[JominiAccessPlayerJoinRequests]"

						item = {
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = fixed
								spacing = 5
								margin = { 0 2 }

								text_single = {
									text = "[PlayerJoinRequest.GetPlayerName]"
									autoresize = yes
									layoutpolicy_horizontal = expanding
								}

								expand = {}

								button_standard = {
									name = "reject_button"
									text = "JOMINI_MULTIPLAYER_GUI_PLAYER_JOIN_REQUEST_REJECT"
									onclick = "[PlayerJoinRequest.Reject]"
									layoutpolicy_horizontal = fixed
								}

								button_primary = {
									name = "accept_button"
									text = "JOMINI_MULTIPLAYER_GUI_PLAYER_JOIN_REQUEST_ACCEPT"
									onclick = "[PlayerJoinRequest.Accept]"
								}
							}
						}
					}
				}
			}
		}
	}

	type JominiMultiplayerOosMessage = window {
		name = "multiplayer_oos_message"
		using = Window_Background_Popup
		size = { 600 700 }
		parentanchor = center
		visible = "[DataModelHasItems( OosWindow.GetOosData )]"

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			margin = { 10 10 }
			spacing = 5

			text_single = {
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_HEADER"
				autoresize = yes
			}

			text_multi = {
				margin { 50 0 }
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_MY"
				minimumsize = { 0 50 }
				visible = "[OosWindow.IsLocalOos]"
				layoutpolicy_horizontal = expanding
			}

			text_multi = {
				margin { 50 0 }
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_DESC"
				visible = "[Not( OosWindow.IsLocalOos )]"
				minimumsize = { 0 50 }
				layoutpolicy_horizontal = expanding
			}

			text_single = {
				margin { 50 0 }
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_DESC_LOCAL"
				visible = "[OosWindow.IsLocalOos]"
				layoutpolicy_horizontal = expanding
			}

			scrollarea = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				scrollbarpolicy_horizontal = always_off

				scrollbar_vertical = {
					using = editor_vertical_scrollbar
				}

				scrollwidget = {
					vbox = {
						vbox = {
							margin = { 5 5 }
							layoutpolicy_horizontal = expanding
							datamodel = "[OosWindow.GetOosData]"

							item = {
								vbox = {
									block "oos_item" {
										layoutpolicy_horizontal = expanding

										text_single = {
											text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_PLAYER_NAME"
											max_width = 490
											autoresize = yes
											layoutpolicy_horizontal = expanding
										}

										text_single = {
											text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_TYPE"
											max_width = 490
											autoresize = yes
											layoutpolicy_horizontal = expanding
										}

										text_single = {
											text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_FOLDER"
											max_width = 490
											autoresize = yes
											layoutpolicy_horizontal = expanding
										}
									}
								}
							}
						}

						expand = {}
					}
				}
			}

			button_standard = {
				size = { 300 30 }
				datacontext = "[OosWindow]"
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_CONTINUE"
				onclick = "[OosWindow.Continue]"
			}

			button_standard = {
				size = { 300 30 }
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_EXIT_BUTTON"
				onclick = "[OosWindow.GoToMenu]"
			}
		}
	}
}

types JominiMultiplayerFrontend
{
	type JominiMultiplayerFrontendView = widget {
		# visible = no
		### moved to serverbrowserwindow
		name = "JominiMultiplayerView"
		size = { 100% 100% }

		block "background" {}

		block "states" {}

		block "menu"
		{
			flowcontainer = {
				block "menu_properties"
				{
					direction = vertical
				}

				block "menu_items"
				{
					JominiMultiplayerFrontEndButton = {
						onclick = "[FrontEndMultiplayerView.OnBack]"
						text = "JOMINI_MULTIPLAYER_GUI_SERVER_BROWSER_BACK_BUTTON"
					}

					JominiMultiplayerFrontEndButton = {
						onclick = "[FrontEndMultiplayerView.OnLoad]"
						text = "JOMINI_MULTIPLAYER_GUI_SERVER_BROWSER_LOAD_AND_HOST_BUTTON"
					}

					JominiMultiplayerFrontEndButton = {
						onclick = "[FrontEndMultiplayerView.OnHost]"
						text = "JOMINI_MULTIPLAYER_GUI_SERVER_BROWSER_HOST_BUTTON"
					}

					JominiMultiplayerFrontEndButton = {
						onclick = "[JominiServerBrowserGui.RefreshServers]"
						text = "JOMINI_MULTIPLAYER_GUI_SERVER_BROWSER_SCAN_BUTTON"
					}

				}
			}
		}
	}
}

types JominiMultiplayerSetup {
	type JominiMultiplayerSetupEditBox = editbox {
		align = left
		alwaystransparent = no
		focuspolicy = all
		block "setup_editbox" {
			cursorcolor = { 1 1 1 0.6 }
			maxcharacters = 255
			default_format = "#medium"
			fontsize = 14

			background = {
				using = Background_Area_Border_Solid
			}
		}
	}

	type JominiMultiplayerSetupTextBox = text_single {}

	type JominiMultiplayerSetupCheckButton = hbox {
		layoutpolicy_horizontal = expanding
		spacing = 10
		margin_left = 10

		checkbutton = {
			block "setup_checkbutton" {
				texture = "gfx/interface/buttons/button_checkbox.dds"
				framesize = { 80 80 }
				size = { 20 20 }
			}

			block "checkbutton" {}
		}

		JominiMultiplayerSetupTextBox = {
			layoutpolicy_horizontal = expanding

			block "label"
			{
				visible = no
			}
		}
	}

	type JominiMultiplayerSetup = window {
		name = "JominiMultiplayerSetupWindow"

		size = { 420 450 }
		parentanchor = center
		widgetanchor = center

		alwaystransparent = no

		using = Window_Background
		using = Window_Decoration

		vbox = {
			using = Window_Margins

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 10 10 }
				spacing = 20

				text_label_center = {
					layoutpolicy_horizontal = expanding
					text = "JOMINI_MULTIPLAYER_GUI_SHOW_SETTINGS"
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					JominiMultiplayerSetupCheckButton = {
						blockoverride "checkbutton"
						{
							name = "mpconfig_offline"
							checked = "[MultiplayerSetupWindow.GetMPConfig.IsOffline]"
							onclick = "[MultiplayerSetupWindow.AccessMPConfig.SetOffline]"
							tooltip = "[MultiplayerSetupWindow.GetMPConfig.GetPrivateToolTip]"
							enabled = "[JominiIsMultiplayerAccessible]"
						}

						blockoverride "label"
						{
							text = "JOMINI_MULTIPLAYER_GUI_GAME_MODE_OFFLINE"
						}
					}

					JominiMultiplayerSetupCheckButton = {
						blockoverride "checkbutton"
						{
							name = "mpconfig_private"
							checked = "[MultiplayerSetupWindow.GetMPConfig.IsPrivate]"
							onclick = "[MultiplayerSetupWindow.AccessMPConfig.SetPrivate]"
							tooltip = "[MultiplayerSetupWindow.GetMPConfig.GetPrivateToolTip]"
							enabled = "[JominiIsMultiplayerAccessible]"
						}

						blockoverride "label"
						{
							text = "JOMINI_MULTIPLAYER_GUI_PRIVATE"
						}

						tooltip = JOMINI_MULTIPLAYER_GUI_PRIVATE_TT
					}

					JominiMultiplayerSetupCheckButton = {
						blockoverride "checkbutton"
						{
							name = "mpconfig_public"
							checked = "[MultiplayerSetupWindow.GetMPConfig.IsPublic]"
							onclick = "[MultiplayerSetupWindow.AccessMPConfig.SetPublic]"
							tooltip = "[MultiplayerSetupWindow.GetMPConfig.GetPublicToolTip]"
							enabled = "[JominiIsMultiplayerAccessible]"
						}

						blockoverride "label"
						{
							text = "JOMINI_MULTIPLAYER_GUI_PUBLIC"
						}

						tooltip = JOMINI_MULTIPLAYER_GUI_PUBLIC_TT
					}
				}

				vbox = {
					spacing = 10
					layoutpolicy_horizontal = expanding

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						JominiMultiplayerSetupTextBox = {
							text = "JOMINI_MULTIPLAYER_GUI_SERVER_NAME_LABEL"
							layoutpolicy_horizontal = expanding
							visible = "[Not(MultiplayerSetupWindow.GetMPConfig.IsOffline)]"
						}

						JominiMultiplayerSetupEditBox = {
							name = "game_name"
							minimumsize = { 160 30 }
							max_width = 160
							text = "[MultiplayerSetupWindow.GetDefaultServerName]"
							visible = "[Not(MultiplayerSetupWindow.GetMPConfig.IsOffline)]"
							layoutpolicy_horizontal = expanding
							onreturnpressed = "[MultiplayerSetupWindow.Host]"
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						JominiMultiplayerSetupTextBox = {
							text = "JOMINI_MULTIPLAYER_GUI_SERVER_PASSWORD_LABEL"
							layoutpolicy_horizontal = expanding
							visible = "[Not(MultiplayerSetupWindow.GetMPConfig.IsOffline)]"
						}


						JominiMultiplayerSetupEditBox = {
							name = "game_password"
							minimumsize = { 160 30 }
							max_width = 160
							text = "[MultiplayerSetupWindow.GetDefaultServerPassword]"
							layoutpolicy_horizontal = expanding
							visible = "[Not(MultiplayerSetupWindow.GetMPConfig.IsOffline)]"
							onreturnpressed = "[MultiplayerSetupWindow.Host]"
						}

					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					JominiMultiplayerSetupCheckButton = {
						visible = "[MultiplayerSetupWindow.GetMPConfig.IsPrivate]"

						blockoverride "checkbutton"
						{
							name = "hotjoin_autoaccept"
							checked = "[MultiplayerSetupWindow.GetMPConfig.IsHotjoinAutoAccept]"
							onclick = "[MultiplayerSetupWindow.AccessMPConfig.ToggleHotjoinAutoAccept]"
							enabled = "[JominiIsMultiplayerAccessible]"
						}

						blockoverride "label"
						{
							autoresize = yes
							text = "JOMINI_MULTIPLAYER_GUI_AUTO_ACCEPT"
						}

						tooltip = "JOMINI_MULTIPLAYER_GUI_AUTO_ACCEPT_TT"
					}

					JominiMultiplayerSetupCheckButton = {
						visible = "[JominiMultiplayerIsCrossplayFilterAvailable]"

						blockoverride "checkbutton"
						{
							name = "crossplay_status"
							enabled = "[JominiMultiplayerIsCrossplayEnabled]"
						}

						blockoverride "label"
						{
							autoresize = yes
							text = "JOMINI_MULTIPLAYER_GUI_SERVER_FILTER_LABEL_CROSSPLAY_ENABLED"
						}
					}
				}


				expand = {}

				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5

					button_primary = {
						name = "host_button"
						layoutpolicy_horizontal = expanding
						text = "JOMINI_MULTIPLAYER_GUI_SESSION_HOST"
						onclick = "[MultiplayerSetupWindow.Host]"
						enabled = "[MultiplayerSetupWindow.CanHost]"
						tooltip = "[MultiplayerSetupWindow.HostToolTip]"
					}

					button_standard = {
						name = "cancel_button"
						layoutpolicy_horizontal = expanding
						text = "JOMINI_MULTIPLAYER_GUI_SESSION_CANCEL"
						onclick = "[MultiplayerSetupWindow.Cancel]"
						shortcut = "close_window"
					}
				}
			}
		}
	}
}

template JominiLobbyViewModuleBackground {
	block "lobby_module_background"
	{
		# shaderfile = "gfx/FX/pdxgui_default.shader"
		# texture = "gfx/editor_gui/editor_field.dds"
		# spriteType = CorneredStretched
		# spriteborder = { 6 6 }
	}
}

types JominiMultiplayerLobby
{
	# Button Style
	type JominiLobbyViewButton = button_standard {
	}

	type JominiLobbyRemovePlayer = button {
		enabled = "[LobbyPlayer.CanRemovePlayer]"
		visible = "[LobbyPlayer.CanRemovePlayer]"

		onclick = "[LobbyPlayer.RemovePlayer]"

		block "remove_player_button_style"
		{
			layoutpolicy_horizontal = fixed
			size = { 20 20 }

			texture = "gfx/editor_gui/editor_button.dds"
			gfxtype = framedbuttongfx
			spriteType = CorneredStretched
			spriteborder = { 4 4 }
			effectname = "NoHighlight"
			framesize = { 16 16 }
			upframe = 1
			downframe = 2
			overframe = 3
			disableframe = 4
			intersectionmask = yes
			text = "K"
		}
	}

	type JominiLobbyViewServerInfoEntry = button {
		block "server_info_entry_size"
		{
			size = { 0 20 }
			layoutpolicy_horizontal = expanding
		}

		block "server_info_entry_styling"
		{
			align = left
			using = Font_Type_Standard
			using = Font_Size_Small
			default_format = "#high"
			margin = { 5 5 }

			background = {
				using = Background_Area
			}
		}
	}

	# Hosting status
	type JominiLobbyViewHostingStatus = vbox {
		margin = { 10 5 }
		layoutpolicy_horizontal = expanding
		visible = "[LobbyView.ShowHosting]"

		background = {
			using = Background_Area
		}

		JominiMultiplayerSetupTextBox = {
			text = "JOMINI_MULTIPLAYER_GUI_HOSTING"
			layoutpolicy_horizontal = expanding
		}
	}

	# Error information
	type JominiLobbyViewHostError = vbox {
		visible = "[HasHostError]"
		layoutpolicy_horizontal = expanding
		margin = { 10 10 }
		spacing = 25

		background = {
			using = Background_Area
		}

		text_multi = {
			layoutpolicy_horizontal = expanding
			autoresize = yes
			text = "[GetHostError]"
			default_format = "#X"
		}

		button_standard = {
			text = "JOMINI_MULTIPLAYER_GUI_CLOSE"
			onclick = "[ClearHostError]"
		}
	}

	type JominiLobbyExpandButton = button_expand {
	}

	type JominiLobbyCollapseButton = button_expand {
		frame = 2
	}

	# The MP info widget displays the multiplayer information
	type JominiLobbyViewMPInfo = vbox {
		name = "mp_info"
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		alwaystransparent = no
		filter_mouse = left|right

		block "mp_info_properties" {
			margin_top = 10
			spacing = 10

			background = {
				using = JominiLobbyViewModuleBackground
			}
		}

		text_label_center = {
			layoutpolicy_horizontal = expanding
			align = center|nobaseline
			margin = { 0 5 }
			text = "JOMINI_MULTIPLAYER_GUI_VISIBILITY"
		}
		
		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10
			margin_left = 10

			tooltip = JOMINI_MULTIPLAYER_GUI_PRIVATE_TT

			button_radio = {
				visible = "[Not(LobbyView.IsInvite)]"
				onclick = "[LobbyView.SetInvite]"
			}

			button_radio = {
				visible = "[LobbyView.IsInvite]"
				frame = 2
			}

			text_single = {
				text = "JOMINI_MULTIPLAYER_GUI_PRIVATE"
			}

			expand = {}
		}

		hbox = {
			visible = "[JominiMultiplayerIsCrossplayFilterAvailable]"
		
			layoutpolicy_horizontal = expanding
			spacing = 10
			margin_left = 10

			tooltip = MULTIPLAYER_GUI_PUBLIC_MICROSOFT_ONLY_TT

			button_radio = {
				visible = "[Not(LobbyView.IsPublicNoCrossplay)]"
				onclick = "[LobbyView.SetPublicNoCrossplay]"
			}

			button_radio = {
				visible = "[LobbyView.IsPublicNoCrossplay]"
				frame = 2
			}

			text_single = {
				text = "MULTIPLAYER_GUI_PUBLIC_MICROSOFT_ONLY"
			}

			expand = {}
		}
		
		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10
			margin_left = 10

			tooltip = JOMINI_MULTIPLAYER_GUI_PUBLIC_TT

			button_radio = {
				visible = "[Not(LobbyView.IsPublicCrossplay)]"
				onclick = "[LobbyView.SetPublicCrossplay]"
				enabled = "[Or(Not(JominiMultiplayerIsCrossplayFilterAvailable), JominiMultiplayerIsCrossplayEnabled)]"
			}

			button_radio = {
				visible = "[LobbyView.IsPublicCrossplay]"
				frame = 2
			}

			text_single = {
				text = "JOMINI_MULTIPLAYER_GUI_PUBLIC"
			}

			expand = {}
		}

		vbox = {
			spacing = 10
			layoutpolicy_horizontal = expanding
			restrictparent_min = yes
			block "setup_hbox_height" {}

			text_label_center = {
				layoutpolicy_horizontal = expanding
				align = center|nobaseline
				margin = { 0 5 }
				text = "JOMINI_MULTIPLAYER_GUI_GAME_SETTINGS"
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10
				margin_left = 10

				visible = "[Not(LobbyView.GetServerInfo.IsInvite)]"

				JominiMultiplayerSetupTextBox = {
					text = "JOMINI_MULTIPLAYER_GUI_SERVER_NAME"
					layoutpolicy_horizontal = expanding
				}

				JominiMultiplayerSetupEditBox = {
					name = "game_name"
					minimumsize = { 160 30 }
					max_width = 160
					margin_left = 5

					text = "[LobbyView.GetServerInfo.GetServerName]"

					onreturnpressed = "[LobbyView.SetName]"
					ontextedited = "[LobbyView.OnNameEdit]"
					enabled = "[CanEditSettingsAfterHost]"
				}

				button_army_select = {
					size = { 25 25 }
					visible = "[CanEditSettingsAfterHost]"
					onclick = "[LobbyView.SetName]"
					tooltip = "JOMINI_MULTIPLAYER_GUI_CHANGE_SERVER_NAME"
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10
				margin_left = 10
				visible = "[JominiIsHostOrLocal]"

				JominiMultiplayerSetupTextBox = {
					text = "JOMINI_MULTIPLAYER_GUI_SERVER_PASSWORD"
					layoutpolicy_horizontal = expanding
				}

				JominiMultiplayerSetupEditBox = {
					name = "game_password"
					minimumsize = { 160 30 }
					max_width = 160
					margin_left = 5

					block "setup_editbox_margins" {}
					onreturnpressed = "[LobbyView.SetPassword]"
					ontextedited = "[LobbyView.OnPasswordEdit]"
					enabled = "[CanEditSettingsAfterHost]"
				}

				button_army_select = {
					size = { 25 25 }
					visible = "[CanEditSettingsAfterHost]"
					onclick = "[LobbyView.SetPassword]"
					tooltip = "JOMINI_MULTIPLAYER_GUI_CHANGE_SERVER_PASSWORD"
				}

			}

			hbox = {
				block "game_options_left" {}
				block "game_options_right" {}
			}
		}

		JominiMultiplayerSetupCheckButton = {
			visible = "[JominiIsHostOrLocal]"

			blockoverride "checkbutton"
			{
				name = "hotjoin_autoaccept"
				checked = "[LobbyView.IsAutoAccept]"
				onclick = "[LobbyView.ToggleAutoAccept]"
				tooltip = "JOMINI_MULTIPLAYER_GUI_AUTO_ACCEPT_TT"
				enabled = "[CanEditSettingsAfterHost]"
			}

			blockoverride "label"
			{
				autoresize = yes
				text = "JOMINI_MULTIPLAYER_GUI_AUTO_ACCEPT"
				tooltip = "JOMINI_MULTIPLAYER_GUI_AUTO_ACCEPT_TT"
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5

			block "mp_info_header" {}

			block "mp_info_left_info" {}

			JominiLobbyViewServerInfoEntry = {
				minimumsize = { 370 0 }
				visible = "[LobbyView.GetServerInfo.HasServerID]"

				textbox = {
					layoutpolicy_horizontal = expanding
					align = top|left
					autoresize = yes
					resizeparent = yes

					text_multi = {
						layoutpolicy_horizontal = expanding
						minimumsize = { 390 50 }
						max_width = 390
						margin = { 0 5 }
						margin_left = 10
						autoresize = yes
						resizeparent = yes
						text = "FRONTEND_INVITE"

						text_occluder = {
							size = { 50 40 }
							parentanchor = top|right

							button_normal = {
								texture = "gfx/interface/frontend/icon_copy.dds"
								size = { 30 30 }
								parentanchor = right|vcenter

								onclick = "[LobbyView.CopyServerID]"
								tooltip = "FRONTEND_COPY_CLIPBUFFER_TT"

								gfxtype = framedbuttongfx
								effectname = "NoHighlight"
								upframe = 1
								overframe = 2
								downframe = 3
								framesize = { 80 80 }
							}
						}
					}
				}
			}

			JominiLobbyViewServerInfoEntry = {
				minimumsize = { 390 0 }

				text_multi = {
					text = "JOMINI_MULTIPLAYER_GUI_CHECKSUM"
					margin = { 10 5 }
					max_width = 390
					autoresize = yes
					resizeparent = yes
				}
				tooltip = "JOMINI_MULTIPLAYER_GUI_GAME_VERSION_TOOLTIP"
			}
		}

		spacer = {
			size = { 5 20 }
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			spacing = 10

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred
				spacing = 10

				text_label_center = {
					layoutpolicy_horizontal = expanding
					margin = { 5 5 }

					text = "JOMINI_MULTIPLAYER_GUI_ENABLED_DLCS"
					block "jomini_standard_textbox" {}
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					margin_top = 20

					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5

						datamodel = "[LobbyView.GetEnabledDLCs]"

						item = {
							text_single = {
								layoutpolicy_horizontal = expanding
								text = "[CString.GetString]"
							}
						}
					}
				}

				blockoverride "scrollbox_empty"
				{
					layoutpolicy_vertical = expanding
					visible = "[IsDataModelEmpty(LobbyView.GetEnabledDLCs)]"
					text = "JOMINI_MULTIPLAYER_GUI_NO_DLCS"
				}
			}
		}

		spacer = {
			size = { 5 20 }
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			spacing = 10

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred
				spacing = 10

				text_label_center = {
					layoutpolicy_horizontal = expanding
					margin = { 5 5 }
					text = "JOMINI_MULTIPLAYER_GUI_ENABLED_MODS"
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5
						datamodel = "[LobbyView.GetEnabledMods]"

						item = {
							text_single = {
								layoutpolicy_horizontal = expanding
								text = "[CString.GetString]"
							}
						}
					}
				}

				blockoverride "scrollbox_empty"
				{
					layoutpolicy_vertical = expanding
					visible = "[IsDataModelEmpty(LobbyView.GetEnabledMods)]"
					text = "JOMINI_MULTIPLAYER_GUI_NO_MODS"
				}
			}
		}
	}

	# The Host widget shows the host button
	type JominiLobbyViewHost = vbox {
		layoutpolicy_horizontal = expanding
		visible = "[And(Not(HasHostError),Not(GameIsMultiplayer))]"
		alwaystransparent = no
		filter_mouse = left|right

		block "host_background" {
			background = {
				using = JominiLobbyViewModuleBackground
			}
		}

		JominiLobbyViewButton = {
			block "host_button"
			{
				text = "JOMINI_MULTIPLAYER_GUI_HOST_BUTTON"
			}

			onclick = "[LobbyView.OpenMultiplayer]"
			tooltip = "[LobbyView.GetOpenMultiplayerToolTip]"

			block "host_button_enabled"
			{
				enabled = "[And(JominiIsMultiplayerAccessible, JominiIsHostOrLocal)]"
			}

			layoutpolicy_horizontal = expanding
		}
	}

	# Playerlist item
	type JominiLobbyViewPlayerItem = hbox {
		layoutpolicy_horizontal = expanding
		alwaystransparent = no
		filter_mouse = left|right

		background = {
			using = Background_Area_Dark
			margin = { 5 0}
		}

		block "playerlist_item_content" {
			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				maximumsize = { 390 -1 }
				margin = { 10 5 }
				spacing = 10

				block "playable_icon" {

					widget = {
						size = { 50 70 }
						layoutpolicy_horizontal = fixed
						layoutpolicy_vertical = expanding

						# button_standard = {
						# 	size = { 60 70 }
						# 	text = "no char"
						# }

						widget = {
							visible = "[LobbyPlayer.IsObserver]"
							size = { 47 75 }

							icon_observer = {
								parentanchor = center
								size = { 48 48 }
							}
						}

						container = {
							visible = "[LobbyPlayer.HasPlayable]"
							coa_realm_small_crown = {
								datacontext = "[LobbyPlayer.GetPlayable.GetCharacter]"
								visible = "[Character.IsValid]"
							}
						}

						##### NO CHARACTER CHOSEN ####

						# container = {
						# 	coa_realm_small_crown = {
						# 		texture = "gfx/coat_of_arms/textured_emblems/_default.dds"
						# 		# datacontext = "[LobbyPlayer.GetPlayable.GetCharacter]"
						# 		visible = "[Not(Character.IsValid)]"
						# 	}
						# }
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						text_multi = {
							layoutpolicy_horizontal = expanding
							max_width = 300
							autoresize = yes
							text = "[LobbyPlayer.GetName]"
							default_format = "#high"
						}

						text_single = {
							visible = "[LobbyPlayer.IsHost]"
							text = "HOST"
							default_format = "#high"
							margin_right = 5
						}
					}

					hbox = {
						spacing = 5
						layoutpolicy_horizontal = expanding
						allow_outside = yes

						# Readyness
						block "readyness" {
							hbox = {
								text_multi = {
									layoutpolicy_horizontal = expanding
									text = "JOMINI_MULTIPLAYER_GUI_READY"
									visible = "[And( LobbyPlayer.IsReady, Not( LobbyPlayer.IsObserver ) )]"
									align = nobaseline
									autoresize = yes
								}
							}
						}

						widget = {
							allow_outside = yes
							minimumsize = { 30 0 }

							button_kick_player = {
								parentanchor = bottom|right
								widgetanchor = bottom|right
								size = { 30 30 }
								visible = "[LobbyPlayer.CanRemovePlayer]"
								onclick = "[LobbyPlayer.RemovePlayer]"
								tooltip = "JOMINI_MULTIPLAYER_GUI_PLAYER_KICK_BUTTON_LABEL_TT"
							}
						}

						widget = {
							allow_outside = yes
							minimumsize = { 30 0 }

							button_clear = {
								parentanchor = bottom|right
								widgetanchor = bottom|right
								size = { 30 30 }
								visible = "[And( LobbyPlayer.IsLocalPlayer, Or( LobbyPlayer.HasPlayable, LobbyPlayer.IsObserver ) )]"
								onclick = "[LobbyView.ClearSelection]"
								tooltip = "JOMINI_MULTIPLAYER_GUI_CLEAR_SELECTION"
							}
						}
					}
				}
			}
		}
	}

	# Playerlist widget
	type JominiLobbyViewPlayerList = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		margin = { 0 10 }
		maximumsize = { 390 -1 }

		background = {
			using = JominiLobbyViewModuleBackground
		}

		JominiLobbyViewPlayerItem = {
			datacontext = "[LobbyView.AccessLocalPlayer]"
		}

		JominiMultiplayerTextbox = {
			minimumsize = { 370 50 }
			margin_left = 20
			text = "JOMINI_MULTIPLAYER_GUI_OTHER_PLAYERS_COUNT"
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_right = -5
			spacing = 5

			scrollbox = {
				visible = "[GameIsMultiplayer]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_margins" {}

				blockoverride "scrollbox_empty"
				{
					visible = "[LessThan_int32(GetDataModelSize(LobbyView.Players), '(int32)2')]"
					text = "JOMINI_MULTIPLAYER_GUI_OTHER_PLAYERS_NONE"
					layoutpolicy_vertical = expanding
				}

				blockoverride "scrollbox_content"
				{
					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5
						alwaystransparent = no
						filter_mouse = left|right
						datamodel = "[LobbyView.Players]"
						ignoreinvisible = yes

						block "player_list_properties" {}

						item = {
							JominiLobbyViewPlayerItem = {
								visible = "[Not( LobbyPlayer.IsLocalPlayer)]"
							}
						}
					}
				}
			}

			textbox = {
				layoutpolicy_horizontal = expanding
				align = top|left

				text_multi = {
					layoutpolicy_horizontal = expanding
					minimumsize = { 390 50 }
					max_width = 390
					margin = { 0 5 }
					margin_left = 10
					autoresize = yes
					resizeparent = yes
					text = "FRONTEND_INVITE"

					text_occluder = {
						size = { 50 40 }
						parentanchor = top|right
					}
				}

				button_normal = {
					texture = "gfx/interface/frontend/icon_copy.dds"
					size = { 30 30 }
					position = { 0 5 }
					parentanchor = right

					onclick = "[CopyServerID]"
					tooltip = "FRONTEND_COPY_CLIPBUFFER_TT"

					gfxtype = framedbuttongfx
					effectname = "NoHighlight"
					upframe = 1
					overframe = 2
					downframe = 3
					framesize = { 80 80 }
				}
			}
		}
	}

	type JominiLobbyViewBack = vbox {
		layoutpolicy_horizontal = expanding
		margin = { 10 10 }

		alwaystransparent = no
		filter_mouse = left|right

		hbox = {
			layoutpolicy_horizontal = expanding

			button_standard = {
				enabled = "[LobbyView.CanGoBack]"

				block "lobby_view_back_onclick" {
					onclick = "[LobbyView.GoBack]"
				}

				text = "JOMINI_MULTIPLAYER_GUI_SESSION_BACK"

				tooltip = "[LobbyView.GetGoBackToolTip]"
				shortcut = "close_window"

				button_back = {
					parentanchor =  left|vcenter
					position = { 5 0 }
					alwaystransparent = yes
				}
			}

			expand = {}
		}
	}

	# Selection widget
	type JominiLobbyViewSelectionWidget = vbox {
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding
		alwaystransparent = no
		filter_mouse = left|right

		background = {
			using = JominiLobbyViewModuleBackground
		}

		widget = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			visible = "[And( Not( LobbyView.HasSelectedPlayable ), Not( LobbyView.IsObserver ) )]"
			JominiMultiplayerTextbox = {
				size = { 100% 100% }
				align = center|center
				text = "MULTIPLAYER_GUI_CLICK_TO_SELECT"
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			visible = "[And( Not( LobbyView.HasSelectedPlayable ), LobbyView.IsObserver )]"

			spacer = {size = {0 20}}

			text_label_center = {
				name = "header"
				text = "JOMINI_MULTIPLAYER_GUI_OBSERVER"
			}

			text_multi = {
				name = "desc"
				text = "FRONTEND_OBSERVER_DESC"
				autoresize = yes
				max_width = 300
				align = left
			}

			expand = {}
		}

		# Playable Selected
		widget = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			vbox = {
				visible = "[LobbyView.HasSelectedPlayable]"
				block "selected_playable" {
				}
			}
		}

		block "game_rules" {}
	}

	# Game Info Panel
	type JominiLobbyViewGameInfoPanel = vbox {
		size = { 0 0 }
		layoutpolicy_horizontal = expanding
		alwaystransparent = no
		filter_mouse = left|right

		background = {
			using = JominiLobbyViewModuleBackground
		}

		block "game_info" {
		}
	}

	# Module for preparation specific stuff
	type JominiLobbyViewPreparation = vbox {
		#visible = "[IsPreparationLobby]"
		alwaystransparent = no
		filter_mouse = left|right
		layoutpolicy_horizontal = expanding
		margin_right = 10
		margin_left = 10
		margin_bottom = 10


		background = {
			using = JominiLobbyViewModuleBackground
		}

		JominiMultiplayerTextbox = {
			layoutpolicy_horizontal = expanding
			visible = "[And(LobbyView.IsReady,Not(PlayerIsHost))]"
			name = "ready_info"
			minimumsize = { 0 45 }
			multiline = yes
			align = center|center
			text = "JOMINI_MULTIPLAYER_GUI_WAIT_HOST_START"
		}

		button_primary_big = {
			size = { 380 50 }
			visible = "[And( IsPreparationLobby, PlayerIsHost )]"
			onclick = "[LobbyView.Start]"
			enabled = "[LobbyView.CanStart]"
			tooltip = "[LobbyView.StartToolTip]"
			text = "JOMINI_MULTIPLAYER_GUI_START"

			oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"

			state = {
				name = _mouse_press
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_press"
				}
			}

			state = {
				name = _mouse_release
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"
				}
			}
		}

		button_primary_big = {
			size = { 380 50 }
			visible = "[Not( IsPreparationLobby )]"
			text = "JOMINI_MULTIPLAYER_GUI_PLAY"

			onclick = "[LobbyView.ControlSelected]"
			onclick = "[LobbyView.Ready]"
			enabled = "[LobbyView.CanControlSelected]"

			tooltip = "[LobbyView.GetControlToolTip]"
		}
	}

	type JominiLobbyViewEndPreparationConfirmation = widget {
		name = "JominiMultiplayerEndPreparationConfirmation"

		block "properties"
		{
			size = { 300 200 }
			parentanchor = center
			widgetanchor = center
			modal = yes
			modality = all
		}

		block "background"
		{
			background = {
				using = JominiLobbyViewModuleBackground
			}
		}

		block "content"
		{
			textbox = {
				name = "info"
				size = { 100% 50% }
				multiline = yes
				align = center|center
				text = "JOMINI_MULTIPLAYER_GUI_CONFIRMATION"
			}

			JominiLobbyViewButton = {
				onclick = "[EndPrepConfirm.Cancel]"
				size = { 50% 20% }
				text = "JOMINI_MULTIPLAYER_GUI_CANCEL"
				parentanchor = bottom|left
				widgetanchor = bottom|left
			}

			JominiLobbyViewButton = {
				onclick = "[EndPrepConfirm.Confirm]"
				size = { 50% 20% }
				text = "JOMINI_MULTIPLAYER_GUI_CONFIRM"
				parentanchor = bottom|right
				widgetanchor = bottom|right
			}
		}
	}

	type JominiMultiplayerLobby = widget {
		name = "lobbyview"
		size = { 100% 100% }

		widget = {
			parentanchor = bottom
			size = { 100% 100 }

			background = {
				texture = "gfx/interface/tiles/stretch_bottom_fade.dds"
				size = { 100% 10%}
			}

			background = {
				texture = "gfx/interface/tiles/stretch_bottom_fade.dds"
				size = { 100% 10%}
			}
		}

		#### CHOOSE ANY CHARACTER ###
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			maximumsize = { 390 -1 }
			visible = "[Not(GameIsMultiplayer)]"

			expand = {}

			vbox = {
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area_Dark
					margin = { 10 10 }
				}

				background = {
					using = Background_Area_Dark
					margin = { 10 10 }

					modify_texture = {
						texture = "gfx/interface/tiles/tile_fade_mask.dds"
						blend_mode = alphamultiply
						alpha = 0.6
					}
				}

				background = {
					using = Background_Area_Dark
					margin = { 10 10 }
					alpha = 0.6

					modify_texture = {
						texture = "gfx/interface/tiles/tile_fade_mask.dds"
						blend_mode = alphamultiply
					}
				}

				background = {
					using = Background_Area_Dark
					margin = { 10 10 }

					modify_texture = {
						texture = "gfx/interface/tiles/stretch_bottom_fade.dds"
						blend_mode = alphamultiply
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin = { 10 10 }

					button_standard = {
						layoutpolicy_horizontal = expanding
						visible = "[And(And(Not(HasHostError),Not(GameIsMultiplayer)), JominiIsMultiplayerAccessible)]"
						alwaystransparent = no
						filter_mouse = left|right
						text = "JOMINI_MULTIPLAYER_GUI_HOST_BUTTON"
						minimumsize = { 0 78 }

						onclick = "[LobbyView.OpenMultiplayer]"
						tooltip = "[LobbyView.GetOpenMultiplayerToolTip]"
						enabled = "[JominiIsHostOrLocal]"
					}

					button_standard = {
						layoutpolicy_horizontal = expanding
						visible = "[And(And(Not(HasHostError),Not(GameIsMultiplayer)), Not(JominiIsMultiplayerAccessible))]"
						alwaystransparent = no
						filter_mouse = left|right
						text = "JOMINI_MULTIPLAYER_GUI_HOST_BUTTON"
						minimumsize = { 390 78 }

						onclick = "[OnToggleLoginWindow]"
						tooltip = "[LobbyView.GetOpenMultiplayerToolTip]"
						enabled = "[JominiIsHostOrLocal]"

						icon = {
							parentanchor = right|vcenter
							position = { -15 0 }
							texture = "gfx/interface/frontend/icon_online_offline.dds"
							tooltip = "FRONTEND_LOGIN_PROMPT"

							size = { 30 30 }
							framesize = { 80 80 }
							frame = 2
						}
					}
				}

				JominiLobbyViewBack = {}
			}

		}

		block "left_panel"
		{
			widget = {
				block "left_panel_properties"
				{
					size = { 390 100% }
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					maximumsize = { 390 -1 }

					block "left_panel_content" {
						background = {
							name = "background_loadgame"
							texture = "gfx/interface/tiles/tile_window_background_sidebar.dds"
							spriteType = Corneredtiled
							spriteborder = { 18 18 }
							margin_right = 20
							margin_bottom = 10
							margin_top = 10

							modify_texture = {
								name = "mask"
								texture = "gfx/interface/tiles/tile_fade_mask.dds"
								spriteType = Corneredstretched
								spriteborder_right = 900
								blend_mode = alphamultiply
								alpha = 0.10
							}
						}

						background = {
							using = Background_Area_Dark
							margin_right = 20
							margin_left = 10
							margin_bottom = 10
							margin_top = 10

							modify_texture = {
								texture = "gfx/interface/tiles/stretch_bottom_fade.dds"
								blend_mode = alphamultiply
								alpha = 0.8
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							background = {
								using = JominiLobbyViewModuleBackground
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								name = "tabs"
								margin = { -8 0 }

								button_tab = {
									name = "show_players"
									layoutpolicy_horizontal = expanding

									visible = "[JominiIsMultiplayerAccessible]"
									onclick = "[GetVariableSystem.Set( 'mp_lobby_tabs', 'show_players' )]"
									down = "[GetVariableSystem.HasValue( 'mp_lobby_tabs', 'show_players' )]"

									text = "JOMINI_MULTIPLAYER_GUI_SHOW_PLAYERS"
									default_format = "#low"
								}

								button_tab = {
									name = "show_settings"
									layoutpolicy_horizontal = expanding

									visible = "[JominiIsMultiplayerAccessible]"
									onclick = "[GetVariableSystem.Set( 'mp_lobby_tabs', 'show_settings' )]"
									down = "[GetVariableSystem.HasValue( 'mp_lobby_tabs', 'show_settings' )]"

									text = "JOMINI_MULTIPLAYER_GUI_SHOW_SETTINGS"
									default_format = "#low"

								}
							}
						}

						JominiLobbyViewPlayerList = {
							visible = "[And( And(GetVariableSystem.HasValue( 'mp_lobby_tabs', 'show_players' ), LobbyView.ShowPlayerList), LobbyView.HasServerInfo )]"
						}

						JominiLobbyViewMPInfo = {
							visible = "[And( Or(GetVariableSystem.HasValue( 'mp_lobby_tabs', 'show_settings' ), Not( LobbyView.ShowPlayerList )), LobbyView.HasServerInfo )]"
						}

						expand = {}

						JominiLobbyViewHostingStatus = {}
						JominiLobbyViewHostError = {}

						JominiLobbyViewBack = {}
					}
				}
			}
		}

		block "right_panel"
		{
			widget = {
				parentanchor = top|right
				widgetanchor = top|right

				block "right_panel_properties"
				{
					size = { 400 100% }
				}

				background = {
					name = "background_loadgame"
					texture = "gfx/interface/tiles/tile_window_background_sidebar.dds"
					spriteType = Corneredtiled
					spriteborder = { 18 18 }
					margin_left = 20
					margin_bottom = 10
					margin_top = 10
					mirror = horizontal

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/tiles/tile_fade_mask.dds"
						spriteType = Corneredstretched
						spriteborder_right = 900
						blend_mode = alphamultiply
						alpha = 0.10
					}
				}

				background = {
					using = Background_Area_Dark
					margin_left = 20
					margin_right = 10
					margin_bottom = 10
					margin_top = 10

					modify_texture = {
						texture = "gfx/interface/tiles/stretch_bottom_fade.dds"
						blend_mode = alphamultiply
						alpha = 0.8
					}
				}

				vbox = {
					block "right_panel_content"
					{
						JominiLobbyViewGameInfoPanel = {}
						JominiLobbyViewSelectionWidget = {}
						JominiLobbyViewPreparation = {}
					}
				}
			}
		}
	}
}

template JominiDefaultButtonProperties {
	block "button_style"
	{
		texture = "gfx/editor_gui/editor_button.dds"
		gfxtype = framedbuttongfx
		spriteType = CorneredStretched
		spriteborder = { 4 4 }
		framesize = { 16 16 }
		upframe = 1
		downframe = 2
		overframe = 3
		disableframe = 4
	}
}

types JominiMultiplayerGameTypes
{
	type JominiMultiplayerFrontEndButton = button_standard {
		size = { 200 50 }
	}

	type JominiMultiplayerSortButtonAsc = button {

		block "asc_button_properties" {
			alwaystransparent = yes
			size = { 35 33 }

			icon = {
				texture = "gfx/interface/buttons/button_sort_icon.dds"
				framesize = { 33 33 }
				frame = 1
			}
		}
	}

	type JominiMultiplayerSortButtonDesc = button {

		block "desc_button_properties" {
			alwaystransparent = yes
			size = { 35 33 }

			icon = {
				texture = "gfx/interface/buttons/button_sort_icon.dds"
				framesize = { 33 33 }
				frame = 2
			}
		}
	}

	type JominiMultiplayerCheckbutton = hbox {

		block "serverbrowser_checkbutton" {

			button_checkbox = {
				size = { 20 20 }
				block "checkbutton" {}
			}

			text_single = {
				margin_left = 5

				block "label"
				{
					text = "Label"
				}
			}
		}
	}

	type JominiMultiplayerTextbox = textbox {
		align = left
		block "jominimultiplayertextbox" {
			using = Font_Type_Standard
			using = Font_Size_Small
			default_format = "#high"
		}
	}

	type JominiMultiplayerEditbox = editbox {
		focuspolicy = all
		layoutpolicy_horizontal = expanding
		alwaystransparent = no

		block "jominimultiplayereditbox" {
			cursorcolor = { 1 1 1 0.6 }
			maxcharacters = 255
			default_format = "#high"
			margin_left = 5
			align = nobaseline
			size = { 100 24 }

			background = {
				using = Background_Area_Border_Solid
			}
		}
	}
}
