### DYNASTY LEGACIES WINDOW

window = {
	name = "dynasty_view"
	widgetid = "dynasty_view"
	datacontext = "[DynastyView.GetDynasty]"
	size = { 100% 100% }
	parentanchor = center|hcenter
	movable = no
	filter_mouse = all
	layer = middle

	background = {
		texture = "gfx/interface/tiles/tile_window_background.dds"
		spriteType = Corneredtiled
		spriteborder = { 18 0 }
		margin = { 20 0 }

		modify_texture = {
			texture = "gfx/interface/tiles/tile_overlay_effect_02.dds"
			blend_mode = overlay
		}
	}

	background = {
		using = Background_Bottom_Fade
		alpha = 0.5
	}

	state = {
		name = _show

		using = Animation_FadeIn_Standard
	}

	state = {
		name = _hide

		using = Animation_FadeOut_Standard
	}

	vbox = {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		hbox = {
			layoutpolicy_horizontal = expanding

			background = {
				texture = "gfx/interface/tiles/tile_title_big_top_01.dds"
				margin_bottom = 10
				spriteType = Corneredtiled
				spriteborder = { 0 18 }

				modify_texture = {
					name = "mask"
					texture = "gfx/interface/tiles/tile_title_big_top_01_mask.dds"
					spriteType = Corneredtiled
					spriteborder = { 160 0 }
					blend_mode = alphamultiply
					alpha = 0.5
				}

				modify_texture = {
					name = "overlay"
					texture = "gfx/interface/tiles/tile_title_big_top_01_overlay.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
				}
			}

			vbox = {
				margin_left = 52
				coa_dynasty_medium = {
					blockoverride "coa_button" {
						alwaystransparent = yes
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 10 5 }

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 5 5 }

					text_single = {
						layoutpolicy_horizontal = expanding
						align = center|nobaseline
						text = "DYNASTY_VIEW_HEADING"

						default_format = "#high"
						using = Font_Type_Flavor
						using = Font_Size_Big
					}

					spacer = {
						minimumsize = { 140 0 }
					}

					button_icon = {
						name = "button_close"
						shortcut = "close_window"
						tooltip = "CLOSE_TOOLTIP"
						texture = "gfx/interface/buttons/button_icons/window_close.dds"
						onclick = "[DynastyView.Close]"

					}
				}

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 10
					margin_right = 45

					text_multi = {
						visible = "[GetPlayer.IsDynast]"
						layoutpolicy_horizontal = expanding
						text = "DYNASTY_VIEW_SHOW_LEGACY_EXPLANATION_HEAD"
						autoresize = yes
						fontsize_min = 14
						default_format = "#low"
					}

					text_multi = {
						visible = "[Not(GetPlayer.IsDynast)]"
						layoutpolicy_horizontal = expanding
						text = "DYNASTY_VIEW_SHOW_LEGACY_EXPLANATION_NOT_HEAD"
						autoresize = yes
						fontsize_min = 14
						default_format = "#low"
					}

					vbox = {
						layoutpolicy_vertical = expanding

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "DYNASTY_VIEW_SHOW_LEGACIES"
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "DYNASTY_VIEW_SHOW_RENOWN"
						}
					}
				}

				expand = {}
			}
		}

		expand = {}
	}

	widget = {
		size = { 100% 100% }
		scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"
		parentanchor = center

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_top = 25

			background = {
				using = Background_Bottom_Fade
			}

			expand = {
				minimumsize = { 0 83 }
			}

			vbox = {
				datamodel = "[DynastyView.GetLegacies]"
				layoutpolicy_horizontal = expanding

				spacing = 5

				item = {
					hbox = {
						layoutpolicy_horizontal = expanding

						expand = {}

						### TEXT ###
						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							max_width = 330
							margin_right = 10

							background = {
								layoutpolicy_horizontal = expanding
								margin = { 5 0 }
								using = Background_Area
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								vbox = {
									layoutpolicy_vertical = expanding

									background = {
										using = Background_Area
									}

									icon_doctrine = {
										size = { 80 80 }
										texture = "[DynastyLegacy.GetIcon]"
									}

									expand = {}
								}

								vbox = {
									margin = { 5 5 }
									spacing = 2
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									text_single = {
										layoutpolicy_horizontal = expanding
										text = "[DynastyLegacy.GetName]"
										default_format = "#high"
										using = Font_Size_Medium
										fontsize_min = 14
									}

									text_multi = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
										text = "[DynastyLegacy.GetDesc]"
										maximumsize = { -1 90 }
										fontsize_min = 14
									}

									expand = {}
								}
							}
						}

						#### ILLUSTRATION ####
						hbox = {
							background = {
								texture = "[DynastyLegacy.GetTrackIcon]"

								modify_texture = {
									texture = "gfx/interface/tiles/tile_frame_thin_02.dds"
									spriteType = Corneredtiled
									spriteborder = { 50 50 }
									blend_mode = alphamultiply
								}
							}

							background = {
								texture = "[DynastyLegacy.GetTrackIcon]"

								modify_texture = {
									texture = "gfx/interface/tiles/tile_frame_thin_02.dds"
									spriteType = Corneredtiled
									spriteborder = { 50 50 }
									blend_mode = alphamultiply
								}
							}

							hbox = {
								datamodel = "[DynastyLegacy.GetPerks]"

								item = {
									widget = {
										size = { 296 128 }

										button = {
											size = { 296 128 }
											visible = "[Not( Dynasty.HasPerk( DynastyPerk.Self ) )]"
											enabled = "[DynastyView.CanSelectPerk( DynastyPerk.Self )]"
											onclick = "[DynastyView.SelectPerk( DynastyPerk.Self )]"

											background = {
												size = { 100% 100% }
												texture = "gfx/interface/tiles/tile_frame_horizontal_mask.dds"
												tintcolor = { 0 0 0 0.7 }
												alpha = 0.9
											}

											background = {
												visible = "[Not(DynastyView.CanSelectPerk( DynastyPerk.Self ))]"
												size = { 100% 100% }
												texture = "gfx/interface/tiles/tile_frame_horizontal_mask.dds"
												tintcolor = { 0 0 0 0.8 }

												modify_texture = {
													texture = "gfx/interface/tiles/tile_frame_thin_02.dds"
													spriteType = Corneredtiled
													spriteborder = { 50 50 }
													blend_mode = alphamultiply
													alpha = 0.2
												}
											}

											vbox = {
												visible = "[Not(And(Dynasty.GetDynast.IsLocalPlayer, DynastyView.IsNextUnlockablePerk( DynastyPerk.Self )))]"
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												margin = { 10 5 }
												margin_top = 18

												vbox = {

													text_multi = {
														layoutpolicy_horizontal = expanding
														text = "[DynastyPerk.GetNameNoTooltip]"
														autoresize = yes
														max_width = 296
														fontsize_min = 14
														default_format = "#low"
														# using =Font_Size_Medium
													}

													text_single = {
														text = "DYNASTY_VIEW_SHOW_PERK_COST"
														default_format = "#weak"
													}
												}
											}

											### TEXT ###
											vbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												visible = "[And(Dynasty.GetDynast.IsLocalPlayer, DynastyView.IsNextUnlockablePerk( DynastyPerk.Self ))]"

												vbox = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													margin = { 10 5 }

													vbox = {
														layoutpolicy_vertical = expanding

														expand = {}

														text_multi = {
															layoutpolicy_horizontal = expanding
															text = "[DynastyPerk.GetNameNoTooltip]"
															autoresize = yes
															max_width = 296
															fontsize_min = 14
															default_format = "#high"
															# using =Font_Size_Medium
														}

														text_single = {
															visible = "[DynastyView.CanSelectPerk( DynastyPerk.Self )]"
															text = "DYNASTY_VIEW_SHOW_UNLOCK"
															default_format = "#I"
														}
													}

													text_single = {
														layoutpolicy_horizontal = expanding
														align = right
														text = "DYNASTY_VIEW_SHOW_PERK_COST"
													}

													tooltip_enabled = "[DynastyView.CanSelectPerk( DynastyPerk.Self )]"
													tooltip = "UNLOCK_DYNASTY_PERK_TOOLTIP"
													using = tooltip_se
												}

												progressbar_standard = {
													layoutpolicy_horizontal = expanding
													name = "progress"
													size = { 0 12 }
													value = "[DynastyView.GetPerkProgressCost( DynastyPerk.Self )]"
													min = 0
												}
											}


											button_standard_clean = {
												visible = "[DynastyView.CanSelectPerk( DynastyPerk.Self )]"
												size = { 100% 100% }
												alwaystransparent = yes

												animation_attention_text = {}

												background = {
													texture = "gfx/interface/tiles/tile_vignette_3px.dds"
													spriteType = Corneredtiled
													spriteborder = { 5 5 }
													margin = { -2 -2 }
												}
											}

											tooltip = "LOCKED_DYNASTY_PERK_TOOLTIP"
											using = tooltip_se
										}

										widget = {
											size = { 296 128 }

											vbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding

												expand = {}

												progressbar_green = {
													visible = "[Dynasty.HasPerk( DynastyPerk.Self )]"

													name = "progress"
													layoutpolicy_horizontal = expanding
													size = { 0 12 }
													value = 100.0
												}

												tooltip = "DYNASTY_PERK_TOOLTIP"
												using = tooltip_se
											}
										}
									}
								}
							}
						}

						expand = {}
					}
				}
			}

			expand = {
				minimumsize = { 0 83 }
			}
		}
	}
}

base_dialog = {
	name = "dynasty_perk_confirmation_popup"

	blockoverride "bd_buttons" {
		fixedgridbox = {
			name = "traits_grid"
			addcolumn = 64
			addrow = 64
			maxhorizontalslots = 5
			datamodel_wrap = 5
			flipdirection = yes

			datamodel = "[DynastyPerkConfirmation.GetAssociatedTraits]"

			item = {
				container = {
					button_group = {
						visible = "[Not( EqualTo_string( Trait.GetKey, DynastyPerkConfirmation.GetSelectedTrait.GetKey ) ) ]"
						onclick = "[DynastyPerkConfirmation.SelectTrait( Trait.Self )]"
						datacontext = "[GetPlayer]"

						icon_trait = {

							blockoverride "tooltip_placement"
							{
								using = tooltip_se
							}

							blockoverride "glow"
							{}
						}

					}

					button_group = {
						visible = "[EqualTo_string( Trait.GetKey, DynastyPerkConfirmation.GetSelectedTrait.GetKey ) ]"
						onclick = "[DynastyPerkConfirmation.SelectTrait( Trait.Self )]"

						datacontext = "[GetPlayer]"
						icon_trait = {

							blockoverride "tooltip_placement"
							{
								using = tooltip_se
							}
						}
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10

			button_standard = {
				text = "CANCEL_BUTTON"
				onclick = [GameDialog.Decline]
			}

			button_primary = {
				text = "[GameDialog.GetAcceptText]"
				shortcut = "confirm"
				onclick = [GameDialog.Accept]
			}
		}
	}
}
