
######################################################
############### MARRIAGE INTERACTION #################
######################################################

window = {
	name = "marriage_interaction_window"
	datacontext = "[MarriageInteractionWindow.GetBaseWindow]"
	datacontext = "[MatchmakerInteractionWindow.GetCharacterInteractionConfirmationWindow]"
	position = { 130 30 }
	parentanchor = center
	allow_outside = yes
	layer = middle

	using = Window_Size_CharacterList
	using = Window_Background
	using = Window_Decoration

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	vbox = {
		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "[CharacterInteractionConfirmationWindow.GetSendName]"
			}

			blockoverride "button_close"
			{
				onclick = "[MatchmakerInteractionWindow.Close]"

			}

			blockoverride "button_back"
			{
				visible = "[MarriageInteractionWindow.CanClear]"
				onclick = "[MatchmakerInteractionWindow.OnClear]"
				tooltip = "CLEAR_MARRIED_CHARACTERS"
			}
		}

		widget_character_interaction_four_characters = {
			layoutpolicy_horizontal = expanding

			blockoverride "bg_illustration_datacontext"
			{
				datacontext = "[GetIllustration( 'religion_interior' )]"
			}

			blockoverride "bg_illustration"
			{
				texture = "[Illustration.GetTexture( CharacterInteractionConfirmationWindow.GetActor )]"
			}

			blockoverride "left_small_portrait"
			{
				datacontext = "[CharacterInteractionConfirmationWindow.GetActor]"
				visible = "[And( Character.IsValid, Not( ObjectsEqual( Character.Self, MatchmakerInteractionWindow.GetActorToMatch ) ) )]"
			}

			blockoverride "left_portrait"
			{
				datacontext = "[MatchmakerInteractionWindow.GetActorToMatch]"
			}

			blockoverride "left_interaction_portrait_glow"
			{
				visible = "[MatchmakerInteractionWindow.IsPickingSecondaryActor]"
			}

			blockoverride "right_small_portrait"
			{
				datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"
				visible = "[And( Character.IsValid, Not( ObjectsEqual( Character.Self, MatchmakerInteractionWindow.GetRecipientToMatch ) ) )]"
			}

			blockoverride "right_portrait"
			{
				datacontext = "[MatchmakerInteractionWindow.GetRecipientToMatch]"
			}

			blockoverride "right_interaction_portrait_glow"
			{
				visible = "[MatchmakerInteractionWindow.IsPickingSecondaryRecipient]"
			}

			blockoverride "button_left_change"
			{
				visible = "[MatchmakerInteractionWindow.CanChangeActorCharacter]"
				onclick = "[MatchmakerInteractionWindow.OnChangeOrRevertActorCharacter]"
			}

			blockoverride "button_left_revert"
			{
				visible = "[MatchmakerInteractionWindow.CanRevertActorCharacter]"
				onclick = "[MatchmakerInteractionWindow.OnChangeOrRevertActorCharacter]"
			}

			blockoverride "button_right_change"
			{
				visible = "[MatchmakerInteractionWindow.CanChangeRecipientCharacter]"
				onclick = "[MatchmakerInteractionWindow.OnChangeOrRevertRecipientCharacter]"
			}

			blockoverride "button_right_revert"
			{
				visible = "[MatchmakerInteractionWindow.CanRevertRecipientCharacter]"
				onclick = "[MatchmakerInteractionWindow.OnChangeOrRevertRecipientCharacter]"
			}

			blockoverride "button_clear"
			{
				enabled = "[MarriageInteractionWindow.CanClear]"
				onclick = "[MatchmakerInteractionWindow.OnClear]"
			}
		}

		vbox = {
			name = "marriage_info_and_send_offer"
			visible = "[MatchmakerInteractionWindow.HasPickedCharacters]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			scrollbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				blockoverride = "scrollbox_content"
				{
					## Info about marriage after picking characters
					name = "info_about_marriage"
					layoutpolicy_horizontal = expanding

					vbox = {
						datacontext = "[MarriageInteractionWindow.GetMarriageInfo]"
						layoutpolicy_horizontal = expanding
						margin = { 10 10 }
						spacing = 10

						text_multi = {
							name = "marriage_info"
							margin = { 10 0 }
							minimumsize = { 630 -1 }
							maximumsize = { 630 -1 }
							autoresize = yes
							text = "MARRIAGE_INFO"
						}

						vbox_marriage_interaction_marriage_details = {
							datacontext = "[MarriageInfo.GetBaseOffer]"
							layoutpolicy_horizontal = expanding
						}
					}
				}
			}

			### Send offer info
			vbox = {
				name = "send_offer_window"
				layoutpolicy_horizontal = expanding
				margin = { 0 10 }

				vbox_interaction_options = {
					layoutpolicy_horizontal = expanding
				}

				hbox_character_interaction_acceptance = {
					layoutpolicy_horizontal = expanding
				}

				text_multi_on_decline_summary = {}

				button_primary = {
					name = "tutorial_highlight_send_proposal_button"
					size = { 400 42 }
					text = "send_marriage_proposal_button_name"
					#text = "[CharacterInteractionConfirmationWindow.GetSendName]"
					onclick = "[MatchmakerInteractionWindow.Send]"
					enabled = "[CharacterInteractionConfirmationWindow.CanSend]"
					tooltip = "[CharacterInteractionConfirmationWindow.GetCanSendDescription]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
				}
			}
		}

		### Character List
		vbox = {
			name = "character_list"
			visible = "[Not(MatchmakerInteractionWindow.HasPickedCharacters)]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			spacing = 5

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10
				margin_left = 15
				margin_right = 130
				ignoreinvisible = no
				button_checkbox = {
					datacontext = "[MarriageInteractionWindow.GetMarriageInfo]"
					size = { 30 30 }
					checked = "[MarriageInfo.IsMatrilineal]"
					onclick = "[MarriageInfo.ToggleMatrilineal]"
					tooltip = "MARRIAGE_MATRILINEAL_TOGGLE_TOOLTIP"
				}

				text_single = {
					text = "MARRIAGE_MATRILINEAL_TOGGLE"
					align = nobaseline
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "[MarriageInteractionWindow.GetPrompt]"
					visible = "[Or( MatchmakerInteractionWindow.GetCharacterList.HasItems, MatchmakerInteractionWindow.HasTopCharacterItem )]"

					align = center|nobaseline
					autoresize = no
				}
			}

			divider = {
				layoutpolicy_horizontal = expanding
			}

			vbox_character_list = {
				datacontext = "[MatchmakerInteractionWindow.GetCharacterList]"
				datacontext = "[CharacterSelectionList.GetFilterWithDefault('fertility_filter', '(int32)1')]"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				blockoverride "container_implementation" {
					fixedgridbox = {
						addcolumn = 667
						addrow = 100
						name = "characters_grid"
						datamodel_reuse_widgets = yes

						datamodel = "[CharacterSelectionList.GetList]"
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"

						item = {
							widget_character_list_item = {
								size = { 650 110 }
							}
						}
					}

					blockoverride "bottom_middle_box" {
						hbox = {
							layoutpolicy_horizontal = expanding
							margin_bottom = 5

							expand = {}

							hbox = {
								name = "alliances_grid"
								datamodel = "[CharacterListItem.GetOtherCharacterItems]"

								item = {
									container = {
										button = {
											parentanchor = center
											position = { 0 -20 }
											texture = "gfx/interface/icons/diplomatic_icons.dds"
											frame = 2
											framesize = { 120 120 }
											size = { 30 30 }
											tooltip_enabled = no
										}

										coa_realm_tiny_crown = {
											datacontext = "[CharacterRef.Get]"
											tooltip = "MATCHMAKER_INTERACTION_ALLIANCE"
										}
									}
								}
							}
						}
					}
				}

				blockoverride "scrollbox_empty_visibility"
				{
					layoutpolicy_vertical = expanding
					visible = "[And( IsDataModelEmpty( CharacterSelectionList.GetList ), Not( MatchmakerInteractionWindow.HasTopCharacterItem ) )]"
					text = "NO_CHARACTERS_TO_SELECT"
				}

				blockoverride "special_character" {
					vbox = {
						datacontext = "[MatchmakerInteractionWindow.GetTopCharacterItem]"
						visible = "[MatchmakerInteractionWindow.HasTopCharacterItem]"
						layoutpolicy_horizontal = expanding

						widget_character_list_item = {
							layoutpolicy_horizontal = expanding
						}
					}
				}
			}
		}
	}

	window_character_filter = {
		name = "filter_window"
		datacontext = "[MatchmakerInteractionWindow.GetCharacterList]"
		blockoverride "addition_filter" {
			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('age_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('age_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('age_diff_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('adult_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('personal_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('fertility_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('health_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('trait_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('politics_filter_category')]"

				blockoverride "filters" {

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('alliance_filter')]"
					}

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('prestige_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('claim_filter')]"
					}
				}
			}
		}
	}
}
