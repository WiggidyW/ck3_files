=== Notes ===
This info is a WIP.

=== Structure ===

my_interaction = {
	interface_priority = number							# used by interaction menu
	common_interaction = yes/no							# used by interaction menu
	icon = texture_path									# icon used in various places
	category = interaction_category_hostile 			# used by interaction menu
	is_highlighted = trigger							# should the interaction be highlighted in the menu
	highlighted_reason = loc_key						# tooltip if highlighted in menu
	on_decline_summary = dynamic description			# flavor text that is shown under acceptance widget. Use it when you need to draw more attention to the on decline effect
	special_interaction = type							# this interaction uses specialized GUI
	popup_on_receive = yes								# have the interaction pop-up for the recipient when received
	force_notification = yes/no							# Force diplomatic item if interaction is auto-accept
	pause_on_receive = yes/no							# pause on receive. It makes sence to combine it with popup_on_receive
	ai_accept_negotiation = yes/no						# Mark some interaction as starting negotiations if declined. If yes, we don't show "won't accept" and negative acceptance chance,
														# because there is still a way to accept the interaction via negotiation event chain

	icon = texture_path									# default is gfx/interface/icons/character_interactions/my_interaction.dds
	alert_icon = texture_path							# default is gfx/interface/icons/character_interactions/my_interaction_alert.dds
	icon_small = texture_path							# default is gfx/interface/icons/character_interactions/my_interaction_small.dds
	
	should_use_extra_icon = { always = yes }			# When to show an extra icon. Tooltip key is <key>_extra_icon
	extra_icon = "gfx/<...>/hook_icon.dds"				# Icon to show when should_use_extra_icon is true
	
	redirect = {}										# This changes the redirection of characters using the scopes actor, recipient, secondary_actor and secondary_recipient
	ai_set_target = {}									# Set scope:target to make the AI target something specific. Title targeting interactions don't need this
	populate_actor_list = {}							# Everything sotoredinto the list 'characters' has the potential of being shown to be selected. Uses the scopes actor, recipient, secondary_actor and secondary_recipient.
	populate_recipient_list = {}

	target_type = type									# Possible types: title, none (default)
	target_filter = type								# Possible types:
														#					actor_domain_titles
														#					recipient_domain_titles
														#					secondary_actor_domain_titles
														#					secondary_recipient_domain_titles
														#					actor_domain_titles_including_leases
														#					recipient_domain_titles_including_leases
														#					secondary_actor_domain_titles_including_leases
														#					secondary_recipient_domain_titles_including_leases
														#					actor_de_jure_titles
														#					recipient_de_jure_titles
														#					secondary_actor_de_jure_titles
														#					secondary_recipient_de_jure_titles
														#					none (default)

	ai_maybe = yes										# the ai can reply maybe
	ai_min_reply_days = 4								# minimum days before ai replies
	ai_max_reply_days = 9								# maximum days before ai replies
	ai_accept = mtth									# will the ai accept a request for this interaction

	ai_potential = trigger								# will the ai consider trying this interaction
	ai_will_do = mtth									# how interested is the ai in sending this interaction (tested after selecting targets) 0-100 percent chance, will be clamped
	# Note that for title interactions, each individual target title will get evaluated, and the one giving the highest ai_will_do will get used
	# If the interaction has options, the combination of options that gives the highest ai_will_do will be used
	# Options should never prevent an interaction from sending (except by the recipient refusing), as we assume that to be the case in the AI for performance reasons
	ai_targets = {
		ai_recipients = type 								# which characters does the ai consider as recipient for the interaction, can be scripted multiple times to combine lists
															# available lists are in the "ai_targets" section of this file (trying to add an invalid list will trigger an error message with all available )
		chance = 0-1									# a low chance, such as 0.25, randomly excludes that number of characters from being checked - this is useful for saving performance
	}
	ai_target_quick_trigger = {							# quick triggers for the ai_targets
		adult = yes										# the target needs to be adult
		attracted_to_owner = yes						# the target needs to be attracted to owner
		owner_attracted = yes							# owner needs to be attracted to the target
		prison = yes 									# target must be in prison
	}
	ai_frequency = months								# how often should the ai consider doing this interaction
	special_ai_interaction = type						# this interaction runs specialized code that identifies the interaction by this
	
	can_send_despite_rejection = yes					# interaction can be sent and the ai might reject
	
	greeting = negative									# sets tone in request text
	notification_text = loc_key							# request text
	
	is_shown = trigger									# is the interaction available and visible between scope:actor and scope:recipient
	is_valid_showing_failures_only = trigger			# is the interaction valid to be selected in it's current setup, trigger only displays failures
	is_valid = trigger									# is the interaction valid to be selected in it's current setup
	use_diplomatic_range = yes/no/trigger				# does this interaction check diplomatic range? Yes by default
	
	can_send = trigger									# can the interaction be sent
	is_highlighted = trigger							# should the interaction be highlighted in the menu
	options_heading = loc_key							# text shown above options block - describes all options in general
	send_option = {										# adds an option
		is_shown = trigger								# is option shown
		is_valid = trigger								# is option selectable
		current_description = desc						# tooltip
		flag = flag_name								# if selected then scope:flag_name will be set to yes
		localization = loc_key							# loc_key for option label
		starts_enabled = trigger						# Trigger for whether this should be on when the window opens. If not defined, defaults to off
		can_be_changed = trigger						# Trigger for whether this option can be changed from its default
		can_invalidate_interaction = bool				# If yes then when the AI picks an interaction it will do the full can send this entire interaction check instead of the more peformance saving checking of recipient refusal and ai will do, use with care and profile it
	}
	# Options should avoid preventing an interaction from sending (except by the recipient refusing), as we assume that to be the case in the AI for performance reasons, use can_invalidate_interaction if you need it to be re-checked
	
	on_send = effect									# executes directly the interaction is sent
	on_accept = effect									# executes when accepted by recipient
	on_decline = effect									# executes when declined by recipient
	pre_auto_accept = effect							# only executes if the interaction was auto accepted. Done before any other side effect (E.G., hardcoded ones like marriage)
	on_auto_accept = effect								# only executes if the interaction was auto accepted
	auto_accept = yes/no/trigger						# is the interaction automatically accepted, or can recipient decide

	reply_item_key = loc_key 							# The key to the loc to show in the interaction item tooltip. Receives the name of the interaction in $INTERACTION$. Default value "INTERACTION_REPLY_ITEM"

	# This loc keys are shown to the player when sending the interaction. The meaniang is what is going to be tha answer from the target.
	pre_answer_yes_key = loc_key 						# The key to the loc when the interaction is going to be accepted. Default value "ANSWER_YES"
	pre_answer_no_key = loc_key 						# The key to the loc when the interaction is NOT going to be accepted. Default value "ANSWER_NO"
	pre_answer_maybe_key = loc_key 						# The key to the loc when the interaction maybe is accepted. Receives the acceptance value in $VALUE$. Default value "ANSWER_MAYBE"

	# This loc kays are shown to the player when answering an interaction.
	answer_block_key = loc_key 							# The key to the loc to block the interaction. Default value "ANSWER_BLOCK"
	answer_accept_key = loc_key 						# The key to the loc to accept the interaction. Default value "ANSWER_YES"
	answer_reject_key = loc_key 						# The key to the loc to reject the interaction. Default value "ANSWER_NO"
	answer_acknowledge_key = loc_key 					# The key to the loc to reject the interaction. Default value "ANSWER_ACKNOWLEDGE"

	cost = {											# Scripted cost for theinteraction, will block the actor if doesn't has this cost, will be substracted from the actor when the interaction is sent. Renwon can only be expent by the dynast.
		piety = {}
		prestige = {}
		gold = {}
		renown = {}
	}
}	

=== FAQ ===
Q:	What does the special interaction type arrange_marriage_interaction do?
A:	special_interaction = arrange_marriage_interaction will add extra marriage info to the interaction
	this info makes the game show the special marriage interfaces when setting up an interaction or replying to it.
	It's also used by the ai in knowing which interaction to use when setting up marriages.
	It automatically marries/betroths the secondary participants and sets up alliances and hands out prestige.
	
Q:	What does "secondary_actor = marriage" and "secondary_recipient = marriage" do?
A:	It states that the interaction has secondary participants (the one's actually getting married) and that
	we're allowed to change them in the interface. It also automatically redirects the interaction to the matchmaker
	so that the player can arrange a marriage with the son/daughter of another ruler and get the child as the
	secondary recipient and the ruler as the recipient (since they will be the ones accepting or not).
	It also sets up the list of characters to choose from from the actor/recipient with their courts and children.
	
Q:	What does "secondary_actor = marry_off" and "secondary_recipient = marry_off" do?
A:	Very similar to marriage, but with some expections:
	- The list of characters is calculated from all living characters that are allowed to marry.
	- The redirection makes the character you do the interaction with the secondary actor (since you're the one marrying them off)
	- There's the marriage redirection for whoever you select them to marry (ie mostly being the employer)

Q:	How and when are the character interaction triggers checked?
A:	These are the main triggers used by interactions:
	- is_shown
	- is_highlighted
	- is_valid_showing_failures_only
	- is_valid
	- has_valid_target_showing_failures_only
	- has_valid_target
	- can_be_picked
	- can_be_picked_title
	- can_be_blocked
	- can_send
	
Is there any other special behaviors set in code that these interactions are affected by?
When are the following conditions evaluated, are any of them checked during special circumstances (e.g. "not all scopes exist yet"):
is_shown
can_be_picked
is_valid_showing_failures_only
has_valid_target_showing_failures_only

=== Custom Widgets ===


=== FAQ ===
Q:	What does the special interaction type arrange_marriage_interaction do?
A:	special_interaction = arrange_marriage_interaction will add extra marriage info to the interaction
	this info makes the game show the special marriage interfaces when setting up an interaction or replying to it.
	It's also used by the ai in knowing which interaction to use when setting up marriages.
	It automatically marries/betroths the secondary participants and sets up alliances and hands out prestige.
	
Q:	What does "secondary_actor = marriage" and "secondary_recipient = marriage" do?
A:	It states that the interaction has secondary participants (the one's actually getting married) and that
	we're allowed to change them in the interface. It also automatically redirects the interaction to the matchmaker
	so that the player can arrange a marriage with the son/daughter of another ruler and get the child as the
	secondary recipient and the ruler as the recipient (since they will be the ones accepting or not).
	It also sets up the list of characters to choose from from the actor/recipient with their courts and children.
	
Q:	What does "secondary_actor = marry_off" and "secondary_recipient = marry_off" do?
A:	Very similar to marriage, but with some expections:
	- The list of characters is calculated from all living characters that are allowed to marry.
	- The redirection makes the character you do the interaction with the secondary actor (since you're the one marrying them off)
	- There's the marriage redirection for whoever you select them to marry (ie mostly being the employer)

Q:	How and when are the character interaction triggers checked?
A:	These are the main checks used by interactions:
	
	Can Send: If an interaction can be sent is tested like this:
		- check if set up for sending (this means that all targets and secondary actors/recipients that the interaction uses, must have been selected)
		- check diplomatic range (if interaction scripted to use it)
		- make special is shown checks decided by special_interaction =
		- Trigger: is_shown
		- check if the interaction is already being considered by the recipient
		- Trigger: is_valid_showing_failures_only
		- Trigger: has_valid_target_showing_failures_only
		- Trigger: can_send
		- Trigger: is_valid
		- Trigger: has_valid_target
		- make special can send checks decided by special_interaction =
		If it passes all the above, then we check if the interaction needs to be accepted (auto_accept = no or failing trigger and interactions that can be sent regardless like imprison)
		interactions that need acceptance cannot be sent to the ai unless it will accept.
	
	When populating a list of titles we look at this (examples: grant title, revoke title):
		- select domain or dejure title based on target_filter =
		- Trigger: can_be_picked_title with the full interaction scope and the title set as scope:target
		Note: can_be_picked_title is not checked when we try to send, it's a separate trigger that should be a fast way of deciding what can end up in the list to select from
		
	When populating a list of characters we look a this:
		- secondary_actor/secondary_recipient = decides what to base the list off (vassals, courtiers, marriage, dynasty, house, ...)
		If we're haven't picked a character already (many interactions wants us to pick two characters, such as marriage)
			- Trigger: can_be_picked with the current interaction scipe and the tested character set as root	
		Else if we're picking character number two
			- Try setting the character as secondary_actor/secondary_recipient. The interaction should be fully set up after this.
			- Do a full Can Send test, but ignore the ai acceptance check.
		Note: can_be_picked is only there to filter out the first character we need to select and is not part of the Can Send test.
		
	Is Shown: is_shown is used by the interface to check if the interaction should be visible in the interaction list
	Is Valid: is_valid and is_valid_showing_failures_only are tested to see if an interaction should be enabled (clickable) or not in the menu


== ai_targets ==
The following are valid AI targets:
known_secrets - Characters who has a secret you know of
hooked_characters
neighboring_rulers
peer_vassals
guests
dynasty
courtiers
prisoners
sub_realm_characters
realm_characters
vassals
liege
self
head_of_faith
spouses
family
children
primary_war_enemies
war_enemies
war_allies
scripted_relations - Any character you have a scripted relation with
