####MARRIAGE TRIGGER LIST###

#GENERAL MARRIAGE TRIGGERS
#can_marry_common_trigger
#can_marry_trigger
#could_marry_character_trigger
#can_marry_character_trigger
#marriage_between_characters_unlocks_alliance_of_min_tier_trigger
#can_become_concubine

#MARRIAGE INTERACTION TRIGGERS

#############################
# GENERAL MARRIAGE TRIGGERS #
#############################

# Is allowed to marry (current marriage/concubine status ignored)
can_marry_common_trigger = {
	is_alive = yes
	NOT = { has_trait_with_flag = can_not_marry }

	trigger_if = {
		limit = {
			exists = primary_title
		}
		NOR = {
			# Block Mercenaries from marrying or showing up in marriage interactions
			primary_title = {
				is_mercenary_company = yes
			}
	 		# Block City Barons/Mayors from marrying or showing up in marriage interactions
			AND = {
				primary_title.tier <= tier_barony
				has_government = republic_government
			}
		}
	}

	# Clergy cannot marry if their faith disallows it
	trigger_if = {
		limit = {
			is_clergy = yes
		}
		faith = {
			has_doctrine_parameter = clergy_can_marry
		}
	}
}

#Can marry right now
can_marry_trigger = {
	can_marry_common_trigger = yes
	allowed_more_spouses = yes
	is_concubine = no # Concubines are generally blocked from marrying, while a special exception should be done for characters marrying their Concubiness
}

#two characters could potentially marry (does NOT check that they're unmarried)
could_marry_character_trigger = {
	save_temporary_scope_as = can_marry_check
	can_marry_common_trigger = yes
	$CHARACTER$ = { can_marry_common_trigger = yes }
	#Opposite genders only, for as long as childbirth is the only way of passing on your dynasty
	sex_opposite_of = $CHARACTER$
	#Have you recently divorced this character?
	NOT = {
		has_opinion_modifier = {
			modifier = divorced_me_opinion
			target = $CHARACTER$
		}
	}
	#Faith hostility & consanguinity
	trigger_if = {
		limit = { NOT = { is_courtier_of = $CHARACTER$ } } #If you're someone's courtier, your liege can marry you anyway
		faith = {
			faith_allows_marriage_consanguinity_trigger = {
				CHARACTER_1 = scope:can_marry_check
				CHARACTER_2 = $CHARACTER$
			}
			#faith_hostility_level = {
			#	target = $CHARACTER$.faith
			#	value < faith_hostility_prevents_marriage_level
			#}
		}
	}
	trigger_if = {
		limit = { $CHARACTER$ = { NOT = { is_courtier_of = scope:can_marry_check } } } #If you're someone's courtier, your liege can marry you anyway
		$CHARACTER$.faith = {
			faith_allows_marriage_consanguinity_trigger = {
				CHARACTER_1 = scope:can_marry_check
				CHARACTER_2 = $CHARACTER$
			}
			#faith_hostility_level = {
			#	target = scope:can_marry_check.faith
			#	value < faith_hostility_prevents_marriage_level
			#}
		}
	}
}

#Two characters are able to marry right now
can_marry_character_trigger = {
	OR = {
		AND = {
			is_betrothed = yes
			betrothed = $CHARACTER$
		}
		AND = {
			can_marry_trigger = yes
			$CHARACTER$ = { can_marry_trigger = yes }
		}
	}
	could_marry_character_trigger = { CHARACTER = $CHARACTER$ } #Gender, recent divorce, allowed to marry, no illegal incest etc.
}

#A marriage between MY_CHARACTER and THEIR_CHARACTER would give alliance/would unlock renegotiate alliance for current scope where current scope's ally would be at least TIER
marriage_between_characters_unlocks_alliance_of_min_tier_trigger = {
	save_temporary_scope_as = alliance_unlocker
	$MY_CHARACTER$ = {
		OR = {
			this = scope:alliance_unlocker
			is_close_family_of = scope:alliance_unlocker
		}
	}
	#todo shouldn't this use yields_alliance trigger
	$THEIR_CHARACTER$ = {
		OR = {
			AND = {
				is_ruler = yes
				highest_held_title_tier >= $TIER$
			}
			any_close_family_member = {
				is_ruler = yes
				highest_held_title_tier >= $TIER$
			}
		}
	}
}

can_become_concubine_of_actor_trigger = {
	trigger_if = {
		limit = {
			NOT = { is_imprisoned_by = scope:actor }
		}
		is_married = no
		is_betrothed = no
	}
	trigger_if = {
		limit = {
			is_imprisoned_by = scope:actor
			is_married = yes
		}
		NOT = { is_spouse_of = scope:actor }
	}
	is_concubine = no
	is_ruler = no
	is_landed = no
	is_adult = yes
	sex_opposite_of = scope:actor

	save_temporary_scope_as = recipient_scope
	scope:actor.faith = { # My faith allows this level of consanguinity
		OR = {
			NOT = { scope:actor = { is_close_or_extended_family_of = scope:recipient_scope } }
			AND = {
				scope:actor = { is_cousin_of = scope:recipient_scope }
				has_doctrine_parameter = allows_cousin_marriage
			}
			AND = {
				scope:actor = {
					OR = {
						is_uncle_or_aunt_of = scope:recipient_scope
						is_nibling_of = scope:recipient_scope
					}
				}
				has_doctrine_parameter = allows_aunt_nephew_and_uncle_niece_marriage
			}
			has_doctrine_parameter = allows_unrestricted_marriage
		}
	}
}

ready_to_marry_betrothed_trigger = {
	trigger_if = {
		limit = { exists = betrothed }
		is_adult = yes
		betrothed = { is_adult = yes }
	}
	trigger_else = {
		always = no
	}
}

#################################
# MARRIAGE INTERACTION TRIGGERS #
#################################

marriage_interaction_can_be_picked_trigger = {
	can_marry_trigger = yes
	is_imprisoned = no
}

marriage_interaction_valid_target_trigger = {
	# Clergy cannot marry if their faith doesn't allow it
	trigger_if = {
		limit = {
			scope:secondary_actor = {
				is_clergy = yes
				NOT = {
					faith = {
						has_doctrine_parameter = clergy_can_marry
					}
				}
			}
		}
		custom_description = {
			text = character_is_clergy_and_cannot_marry
			subject = scope:secondary_actor
			object = scope:secondary_recipient
			scope:secondary_actor = {
				is_clergy = no
			}
		}
	}
	trigger_else_if = {
		limit = {
			scope:secondary_recipient = {
				is_clergy = yes
				NOT = {
					faith = {
						has_doctrine_parameter = clergy_can_marry
					}
				}
			}
		}
		custom_description = {
			text = character_is_clergy_and_cannot_marry
			subject = scope:secondary_recipient
			object = scope:secondary_actor
			scope:secondary_recipient = {
				is_clergy = no
			}
		}
	}
	#Marriage
	trigger_else_if = {
		limit = {
			scope:secondary_actor = { is_adult = yes }
			scope:secondary_recipient = { is_adult = yes }
		}
		scope:secondary_actor = {
			custom_description = {
				text = "can_marry_check_secondary_actor"
				subject = scope:secondary_actor
				object = scope:secondary_recipient
				can_marry_character_trigger = { CHARACTER = scope:secondary_recipient } #Checks marriage status, betrothed, gender, consanguinity, faith hostility etc.
			}
		}
	}
	#Betrothal
	trigger_else = {
		scope:secondary_actor = {
			custom_description = {
				text = "can_betroth_check_secondary_actor"
				subject = scope:secondary_actor
				object = scope:secondary_recipient
				can_marry_character_trigger = { CHARACTER = scope:secondary_recipient } #Checks marriage status, betrothed, gender, consanguinity, faith hostility etc.
			}
		}
	}
}

marriage_interaction_auto_accept_trigger = {
	trigger_if = {
		limit = {
			exists = scope:secondary_actor.betrothed		
		}
		custom_description = {
			text = is_betrothed_auto_accept
			subject = scope:secondary_actor
			object = scope:secondary_recipient
			scope:secondary_actor.betrothed = scope:secondary_recipient
		}
	}

	trigger_else_if = {
		limit = {
			scope:marriage_hook = yes
		}
		#Strong hook = 100% accept (unless marrying 1st or 2nd player heir or the ruler and asking for matrilineal/partrilineal resulting in no dynasty children for them)
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:actor = { has_strong_hook = scope:recipient }
			scope:recipient = {
				NAND = {
					#Secondary recipient can't be recipient or 1st/2nd heir...
					OR = {
						this = scope:secondary_recipient
						player_heir_position  = {
							target = scope:secondary_recipient
							position <= 2
						}
					}
					#...if the marriage (matrilineal/patrilineal) does not match their gender
					OR = {
						scope:secondary_recipient = {
							is_female = yes
							NOT = { always = scope:matrilineal }
						}
						scope:secondary_recipient = {
							is_male = yes
							always = scope:matrilineal
						}
					}
				}
			}
		}
	}

	trigger_else = {
		always = no
	}
}

