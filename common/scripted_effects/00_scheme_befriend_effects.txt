#Scripted effects relating to Schemes

#####################################################################
# EFFECT LIST
#####################################################################
# !!! Remember to add all new effects with a short description here !!!

#successful_befriend_opinion_change_effect
#successful_befriend_effect
#successful_befriend_start_friendship_effect

######################################################################
# EFFECTS
######################################################################

successful_befriend_potential_friend_effect = {
	$CHARACTER$ = {
		if = { #Always leads to a potential friendship
			limit = {
				NOR = {
					has_relation_potential_friend = root
					has_relation_friend = root
				}
			}
			if = { #Remove potential rival relation if you have it
				limit = {
					has_relation_potential_rival = root
				}
				remove_relation_potential_rival = root
			}
			set_relation_potential_friend = root
		}
		if = {
			limit = {
				number_of_traits_in_common = {
					target = root
					value >= 3
				}
			}
			$CHARACTER$ = {
				add_opinion = {
					modifier = friendliness_opinion
					target = root
					opinion = 30
				}
			}
		}
		else = {
			$CHARACTER$ = {
				add_opinion = {
					modifier = friendliness_opinion
					target = root
					opinion = 20
				}
			}
		}
	}
}

successful_befriend_critical_change_effect = {
	$CHARACTER$ = {
		hidden_effect = {
			if = { #Remove potential rival relation if you have it
				limit = {
					has_relation_potential_rival = root
				}
				remove_relation_potential_rival = root
			}
		}
		if = { #Set friend relation
			limit = {
				NOT = { has_relation_friend = root  }
			}
			set_relation_friend = root
		}
		else_if = { #Fallback
			limit = {
				has_relation_friend = root
			}
			$CHARACTER$ = {
				add_opinion = {
					modifier = friendliness_opinion
					target = root
					opinion = 40
				}
			}
		}
	}
}

failed_befriend_opinion_change_effect = {
	$CHARACTER$ = {
		add_opinion = {
			modifier = refusal_opinion
			target = root
			opinion = -5
		}
		hidden_effect = {
			set_relation_potential_friend = root
		}
	}
}

failed_befriend_opinion_critical_change_effect = {
	$CHARACTER$ = {
		add_opinion = {
			modifier = disastrous_befriend_attempt_opinion
			target = root
		}
		if = {
			limit = {
				NOR = {
					has_relation_potential_rival = root
					has_relation_rival = root
				}
			}
			hidden_effect = { set_relation_potential_rival = root }
		}
		else_if = { #If you already are potential rivals, you have a chance of becoming Rivals
			limit = {
				has_relation_potential_rival = root
				NOT = {  has_relation_rival = root }
			}
			hidden_effect = { remove_relation_potential_rival = root }
			set_relation_rival = root
		}
	}
}

#set_befriend_flavor_flag_effect = {
#	random_list = {
#		5 = { 	
#			trigger = {
#				scope:scheme.scheme_target = {
#					opinion = {
#						target = scope:scheme.scheme_owner
#						value > -21
#					}
#					NOT = { is_consort_of = scope:owner }
#				}
#			}
#			save_scope_value_as = {
#				name = befriend_method
#				value = flag:lords_manor
#			}
#			random_sub_realm_barony = {
#				limit = {
#					NOR = {
#						holder = scope:owner
#						holder = scope:target
#					}
#				}
#				save_scope_as = barony
#			}
#		}
#		5 = {	
#			trigger = {
#				scope:scheme.scheme_target = {
#					opinion = {
#						target = scope:scheme.scheme_owner
#						value > -21
#					}
#					NOT = { is_consort_of = scope:owner }
#				}
#			}	
#			save_scope_value_as = {
#				name = befriend_method
#				value = flag:attending_dance
#			}
#			scope:target.liege = {
#				random_sub_realm_barony = {
#					limit = {
#						NOR = {
#							holder = scope:owner
#							holder = scope:target
#						}
#					}
#					save_scope_as = barony
#				}
#			}
#		}
#		5 = {	
#			trigger = {
#				scope:scheme = {
#					scheme_target = {
#						save_temporary_scope_as = compare_character
#					}
#					scheme_owner = {
#						OR = {
#							has_same_education_as_compare_character_trigger = yes
#							has_same_lifestyle_as_compare_character_trigger = yes
#							has_same_fame_as_compare_character_trigger = yes
#							AND = {
#								has_trait = deceitful
#								OR = {
#									diplomacy > 10
#									intrigue > 15
#								}
#							}
#						}
#					}
#				}
#			}	
#			save_scope_value_as = {
#				name = befriend_method
#				value = flag:common_interests
#			}
#		}
#		5 = {		
#			trigger = {
#				scope:scheme.scheme_target = {
#					opinion = {
#						target = scope:scheme.scheme_owner
#						value < -20
#					}
#					is_landed = yes
#					NOT = { is_consort_of = scope:owner }
#				}
#			}
#			save_scope_value_as = {
#				name = befriend_method
#				value = flag:formal_meeting
#			}
#		}
#		5 = {		
#			trigger = {
#				befriend_target_is_close_to_owner_trigger = yes
#			}
#			save_scope_value_as = {
#				name = befriend_method
#				value = flag:estate_visit
#			}
#			random_sub_realm_barony = {
#				limit = {
#					NOT = { holder = scope:target }
#				}
#				save_scope_as = barony
#			}
#		}	
#	}
#}

#successful_befriend_effect = { #Currently this outcome sets a potential friend relationship
#	hidden_effect = {
#		scope:owner = {
#			if = {
#				limit = {
#					NOT = {
#						has_relation_potential_friend = scope:target
#						has_relation_friend = scope:target
#					}
#				}
#				successful_befriend_opinion_change_effect = yes
#				set_relation_potential_friend = scope:target
#			}
#			else_if = { #If you already are potential friends, you have a chance of becoming Friends
#				limit = {
#					has_relation_potential_friend = scope:target
#				}
#				random = {
#					chance = 50
#					remove_relation_potential_friend = scope:target
#					set_relation_friend = scope:target
#				}
#			}
#		}
#	}
#}

#successful_befriend_start_friendship_effect = {
#	successful_befriend_opinion_change_effect = yes
#	scope:owner = {
#		if = {
#			limit = {
#				has_relation_potential_friend = scope:target
#			}
#			remove_relation_potential_friend = scope:target
#		}
#		if = {
#			limit = {
#				NOT = { has_relation_friend = scope:target }
#			}
#			set_relation_friend = scope:target
#		}
#	}
#}