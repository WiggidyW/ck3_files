
convert_county_and_holder_if_in_region_effect = {
	if = {
		# If this county is of the old culture and is in the designated region, flip it to the new culture.
		limit = {
			culture = $OLD_CULTURE$
			title_province = {
				geographical_region = $REGION$
			}
		}
		set_county_culture = $NEW_CULTURE$

		# If the holder is also of the old culture, and their capital is in the designated region, we flip them along with the county.
		holder = {
			if = {
				limit = {
					culture = $OLD_CULTURE$
					capital_province = {
						geographical_region = $REGION$
					}
				}
				set_culture = $NEW_CULTURE$
			}
		}
	}
}

merge_cultures_in_region_effect = {
	hidden_effect = {
		convert_county_and_holder_if_in_region_effect = {
			OLD_CULTURE = $OLD_CULTURE_1$
			NEW_CULTURE = $NEW_CULTURE$
			REGION = $REGION$
		}
		convert_county_and_holder_if_in_region_effect = {
			OLD_CULTURE = $OLD_CULTURE_2$
			NEW_CULTURE = $NEW_CULTURE$
			REGION = $REGION$
		}
	}
}

convert_player_realm_from_old_culture_to_new_effect = {
	# For localization
	$OLD_CULTURE$ = { save_scope_as = old_culture }
	$NEW_CULTURE$ = { save_scope_as = new_culture }
	
	custom_tooltip = global_culture.custom.change_culture
	hidden_effect = {
		# Compile a list of everyone who will flip to the new culture.
		every_vassal_or_below = {
			limit = {
				culture = $OLD_CULTURE$
			}
			add_to_list = characters_to_convert
			every_courtier = {
				limit = {
					culture = $OLD_CULTURE$
				}
				add_to_list = characters_to_convert
			}
		}
		every_courtier = {
			limit = {
				culture = $OLD_CULTURE$
			}
			add_to_list = characters_to_convert
		}

		# Flip the player to the new culture.
		set_culture = $NEW_CULTURE$
		add_character_flag = converted_culture_this_lifetime

		# Flip their courtiers/vassals with a custom description.
		every_in_list = {
			list = characters_to_convert
			set_culture = $NEW_CULTURE$
		}

		# Then flip all their counties.
		every_sub_realm_county = {
			limit = {
				culture = $OLD_CULTURE$
			}
			set_county_culture = $NEW_CULTURE$
		}
	}
}

merge_cultures_in_player_realm_effect = {
	$OLD_CULTURE_1$ = { save_scope_as = old_culture_1 }
	$OLD_CULTURE_2$ = { save_scope_as = old_culture_2 }
	$NEW_CULTURE$ = { save_scope_as = new_culture }

	custom_tooltip = global_culture.custom_merge_culture

	hidden_effect = {
		convert_player_realm_from_old_culture_to_new_effect = {
			OLD_CULTURE = scope:old_culture_1
			NEW_CULTURE = scope:new_culture
		}
		convert_player_realm_from_old_culture_to_new_effect = {
			OLD_CULTURE = scope:old_culture_2
			NEW_CULTURE = scope:new_culture
		}
	}
}

convert_family_culture_and_notify_vassals_effect = {
	# Save the root character as a reference
	save_scope_as = converting_character
	# Save the old culture as a scope
	$OLD_CULTURE$ = {
		save_scope_as = old_culture
	}
	$NEW_CULTURE$ = {
		save_scope_as = new_culture
	}
	$CONVERTER$ = {
		save_scope_as = converter
	}
	# Convert root character and AI close family members
	set_culture = scope:new_culture
	if = {
		limit = {
			is_ai = yes
		}
		add_character_flag = converted_culture_this_lifetime_ai
	}
	else = {
		add_character_flag = converted_culture_this_lifetime
	}

	every_close_family_member = {
		custom = every_close_family_member_sharing_your_culture
		limit = {
			OR = {
				is_courtier_of = scope:converter
				is_vassal_of = scope:converter
			}
			# Exclude previous generations
			NOT = { is_parent_of = root }
			NOT = { is_grandparent_of = root }
			# Only non-ruler same-culture characters
			is_ruler = no
			has_culture = scope:old_culture
		}
		set_culture = scope:new_culture
		add_to_temporary_list = notified_of_culture_change
	}
	every_consort = {
		#custom = every_consort_sharing_your_culture
		limit = {
			is_ruler = no
			has_culture = scope:old_culture
			NOT = { is_in_list = notified_of_culture_change }
		}
		set_culture = scope:new_culture
		add_to_temporary_list = notified_of_culture_change
	}
	every_consort = {
		limit = {
			is_ruler = yes
			has_culture = scope:old_culture
			NOT = { is_in_list = notified_of_culture_change }
		}
		custom_description = {
			text = decide_on_local_culture_conversion
			trigger_event = {
				id = culture_conversion.0001
				days = 1
			}
		}
	}

	# Offer every same-culture vassal a chance to convert
	every_vassal = {
		custom = every_old_culture_vassal_holding_new_culture_land
		limit = {
			culture = scope:old_culture
			NOT = { is_in_list = notified_of_culture_change }
		}
		custom_description = {
			text = decide_on_local_culture_conversion
			trigger_event = {
				id = culture_conversion.0001
				days = 1
			}
		}
		add_to_temporary_list = notified_of_culture_change
	}

	# Notifications
	hidden_effect = {
		every_player = {
			limit = {
				OR = {
					is_consort_of = scope:converting_character
					AND = {
						exists = liege
						liege = scope:converting_character
					}
					AND = {
						exists = scope:converting_character.liege
						this = scope:converting_character.liege
					}
				}
				NOT = { is_in_list = notified_of_culture_change }
			}
			send_interface_message = {
				type = culture_conversion
				title = converted_culture_msg_title
				custom_tooltip = converted_from_old_culture_to_new_culture_tt
			}
		}
	}
}