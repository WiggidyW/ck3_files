#Events handling Fabricate Hook outcomes

namespace = fabricate_hook_ongoing

################################
# Family Offers Understanding of Target
# by Petter Vilberg
################################
scripted_trigger fabricate_hook_ongoing_0001_family_member_trigger = {
	is_available_ai_adult = yes
	is_ruler = no
	NOT = { this = root }
	NOT = {
		has_relation_rival = root
	}
	opinion = {
		target = root
		value > 0
	}
}

fabricate_hook_ongoing.0001 = {
	type = character_event
	title = fabricate_hook_ongoing.0001.t
	desc = fabricate_hook_ongoing.0001.desc
	theme = intrigue
	left_portrait = scope:family_member
	right_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		NOT = { exists = scope:scheme.var:had_event_ongoing_0001 }
		scope:target = {
			NOT = { is_close_family_of = root }
			any_close_family_member = {
				fabricate_hook_ongoing_0001_family_member_trigger = yes
			}
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_event_ongoing_0001
				value = yes
			}
		}
		scope:target = {
			random_close_family_member = {
				limit = {
					fabricate_hook_ongoing_0001_family_member_trigger = yes
				}
				weight = {
					base = 1
					opinion_modifier = {
						opinion_target = scope:target
						multiplier = -0.05
					}
					modifier = {
						add = 10
						is_of_major_interest_to_root_trigger = yes
					}
					modifier = {
						add = 5
						is_of_minor_interest_to_root_trigger = yes
					}
					modifier = {
						add = 10
						has_relation_potential_friend = root
					}
				}
				save_scope_as = family_member
			}
		}
	}

	option = { # How would I Hook them?
		name = fabricate_hook_ongoing.0001.a
		scope:scheme = {
			add_scheme_modifier = {
				type = fabricate_hook_family_success_modifier
			}
		}
	}

	option = { # I need this to be as quick as possible
		name = fabricate_hook_ongoing.0001.b
		scope:scheme = {
			add_scheme_modifier = {
				type = fabricate_hook_family_speed_modifier
			}
		}
	}

	after = {
		progress_towards_friend_effect = {
			CHARACTER = scope:family_member
			OPINION = no
		}
	}
}


################################
# Observe Deference in the Target
# by Petter Vilberg
################################
scripted_trigger fabricate_hook_ongoing_0002_enforcing_character_trigger = {
	NOT = { this = root }
	is_available_ai_adult = yes
	has_hook = scope:target
}

fabricate_hook_ongoing.0002 = {
	type = character_event
	title = fabricate_hook_ongoing.0002.t
	desc = fabricate_hook_ongoing.0002.desc
	theme = intrigue
	left_portrait = scope:target
	right_portrait = scope:hooking_character
	
	trigger = {
		NOT = { exists = scope:scheme.var:had_event_ongoing_0002 }
		scope:scheme = {
			scheme_progress < 8
		}
		scope:target = {
			OR = {
				any_close_or_extended_family_member = {
					is_ruler = no
					fabricate_hook_ongoing_0002_enforcing_character_trigger = yes
				}
				any_courtier_or_guest = {
					fabricate_hook_ongoing_0002_enforcing_character_trigger = yes
				}
				any_vassal = {
					fabricate_hook_ongoing_0002_enforcing_character_trigger = yes
				}
			}
		}
	}

	immediate = {
		scope:scheme = {
			set_variable = {
				name = had_event_ongoing_0002
				value = yes
			}
		}
		scope:target = {
			every_close_or_extended_family_member = {
				limit = {
					is_ruler = no
					fabricate_hook_ongoing_0002_enforcing_character_trigger = yes
				}
				add_to_list = hooking_characters
			}
			every_courtier_or_guest = {
				limit = {
					fabricate_hook_ongoing_0002_enforcing_character_trigger = yes
				}
				add_to_list = hooking_characters
			}
			every_vassal = {
				limit = {
					fabricate_hook_ongoing_0002_enforcing_character_trigger = yes
				}
				add_to_list = hooking_characters
			}
		}
		random_in_list = {
			list = hooking_characters
			weight = {
				base = 1
				modifier = {
					add = 10
					is_of_major_interest_to_root_trigger = yes
				}
				modifier = {
					add = 5
					is_of_minor_interest_to_root_trigger = yes
				}
			}
			save_scope_as = hooking_character
		}
	}

	option = { # How do they do it?
		name = fabricate_hook_ongoing.0002.a
		scope:scheme = {
			add_scheme_modifier = {
				type = fabricate_hook_careful_study_modifier
			}
		}
	}

	option = { # How are they making Target act?
		name = fabricate_hook_ongoing.0002.b
		scope:scheme = {
			add_scheme_progress = 2
		}
	}
}