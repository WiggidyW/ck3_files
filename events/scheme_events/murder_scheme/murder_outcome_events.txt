#Events for Murder Scheme Outcomes

# System by Petter Vilberg and Linnéa Thimrén

namespace = murder_outcome

##################################
# MAINTENANCE EVENTS 0000 - 0099
##################################

murder_outcome.0001 = {

	hidden = yes

	immediate = {
		add_character_flag = { #To make sure you never resolve two murders at once
			flag = is_in_event_murder_outcome_0001
			days = 1
		}
		trigger_event = {
			#Run the setup for the chosen execution type.
			on_action = murder_method_selection
		}
	}
}



#################
# METHOD SELECTION EVENTS
# 0100-0199
#################
# These are used to pick out the murder method.

# Hire an assassin
# by Petter Vilberg
murder_outcome.0101 = {
	type = character_event
	hidden = yes

	weight_multiplier = {
		base = 1
		modifier = { # More likely if lover can save them
			add = 0.5
			scope:target = {
				num_of_relation_lover > 0
			}
		}
		modifier = { # More likely if a Varangian can save them
			add = 1
			scope:target = {
				any_courtier_or_guest = {
					has_character_flag = is_currently_varangian
				}
			}
		}
	}

	immediate = {
		save_scope_value_as = {
			name = murder_method
			value = flag:hired_assassin
		}
		trigger_event = { on_action = murder_setup }
	}
}

# Hire some thugs
# by Petter Vilberg
murder_outcome.0102 = {
	type = character_event
	hidden = yes

	immediate = {
		save_scope_value_as = {
			name = murder_method
			value = flag:hired_thugs
		}
		trigger_event = { on_action = murder_setup }
	}
}

# Poison food at a feast
# by Petter Vilberg
murder_outcome.0103 = {
	type = character_event
	hidden = yes

	immediate = {
		save_scope_value_as = {
			name = murder_method
			value = flag:used_poison
		}
		trigger_event = { on_action = murder_setup }
	}
}

# Sneak a Creepy Crawly into their room
# by Petter Vilberg
murder_outcome.0104 = {
	type = character_event
	hidden = yes

	weight_multiplier = {
		base = 1
		modifier = {
			add = 0.5
			scope:target = {
				num_of_relation_lover > 0
			}
		}
	}

	immediate = {
		save_scope_value_as = {
			name = murder_method
			value = flag:creepy_crawly
		}
		set_local_venomous_creature_effect = yes
		trigger_event = { on_action = murder_setup }
	}
}

# A Riled-up Mob
# by Petter Vilberg
murder_outcome.0105 = {
	type = character_event
	hidden = yes

	trigger = {
		scope:target = {
			exists = capital_county
			capital_county = { county_opinion <= 20 }
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			add = 0.5
			scope:target.capital_county = { county_opinion <= -10 }
		}
		modifier = {
			add = 0.5
			scope:target.capital_county = { county_opinion <= -15 }
		}
		modifier = {
			add = 0.5
			scope:target.capital_county = { county_opinion <= -25 }
		}
		modifier = {
			add = 0.5
			scope:target.capital_county = { county_opinion <= -30 }
		}
	}

	immediate = {
		save_scope_value_as = {
			name = murder_method
			value = flag:riled_up_mob
		}
		trigger_event = { on_action = murder_setup }
	}
}


#############################
# CHILD AND INFANT MURDERS
# 0201-0299
#############################

# Leave a child in the forest
# by Petter Vilberg
murder_outcome.0201 = {
	type = character_event
	hidden = yes

	immediate = {
		save_scope_value_as = {
			name = murder_method
			value = flag:lured_into_forest
		}
		trigger_event = { on_action = murder_setup }
	}
}

# Infant Stabbed to Death
# by Petter Vilberg
murder_outcome.0202 = {
	type = character_event
	hidden = yes

	trigger = {
		scope:scheme.scheme_target = {
			is_adult = no
		}
	}

	immediate = {
		save_scope_value_as = {
			name = murder_method
			value = flag:stab_infant
		}
		trigger_event = { on_action = murder_setup }
	}
}

# Leave venomous creepy crawly in child's cradle
# by Linnéa Thimrén
murder_outcome.0203 = {
	type = character_event
	hidden = yes

	trigger = {
		scope:scheme.scheme_target = {
			is_adult = no
		}
	}

	immediate = {
		save_scope_value_as = {
			name = murder_method
			value = flag:infant_creepy_crawly
		}
		set_local_venomous_creature_effect = yes
		trigger_event = { on_action = murder_setup }
	}
}

################################
# IMPRISONMENT MURDERS
# 0301-0399
################################

#Beat to death in a dungeon
# by Petter Vilberg
murder_outcome.0301 = {
	hidden = yes

	immediate = {
		save_scope_value_as = {
			name = murder_method
			value = flag:beat_to_death_in_dungeon
		}
		trigger_event = { on_action = murder_setup }
	}
}

#Unwelcome guest in House Arrest
# by Petter Vilberg
murder_outcome.0302 = {
	hidden = yes

	immediate = {
		save_scope_value_as = {
			name = murder_method
			value = flag:unwelcome_guest_house_arrest
		}
		scope:target = {
			if = {
				limit = { is_landed = yes }
				save_scope_as = home_owner
			}
			else = {
				if = {
					limit = {
						exists = court_owner
					}
					court_owner = {
						save_scope_as = home_owner
					}
				}
			}
		}
		if = {
			limit = {
				exists = scope:home_owner.capital_province
			}
			scope:home_owner.capital_province = {
				barony = {
					save_scope_as = target_home
				}
			}	
		}
		trigger_event = { on_action = murder_setup }
	}
}


#################################
# VARIOUS SPECIAL MURDERS
# 0400-0499
#################################

#Incapable Murder
# by Petter Vilberg
murder_outcome.0401 = {
	type = character_event
	hidden = yes

	immediate = {
		save_scope_value_as = {
			name = murder_method
			value = flag:strangle_incapable
		}
		trigger_event = { on_action = murder_setup }
	}
}


#######################################
# "REGULAR" MURDER SETUPS 1000 - 1999
#######################################
# Whichever event is randomly rolled here determines what form the event takes.
# Remember to set flags for reference when generating event text in success or failure event.


#Setup for a hired assassin
murder_outcome.1001 = {
	title = murder_outcome.1001.t
	desc = murder_outcome.1001.d
	theme = murder_scheme
	left_portrait = scope:target

	trigger = {
		#Will have been set by murder_outcome.0001 or a special setup event.
		scope:murder_method = flag:hired_assassin
	}

	immediate = {
		murder_outcome_roll_setup_effect = yes
	}

	option = {
		name = murder_outcome.1001.a
		murder_outcome_roll_effect = yes
		stress_impact = {
			arbitrary = minor_stress_impact_loss
			compassionate = medium_stress_impact_gain
			gregarious = minor_stress_impact_gain
		}
	}

	option = {
		name = murder_outcome.1001.b
		ai_chance = {
			base = 0
		}
		scope:scheme = {
			add_scheme_progress = decline_execution_setback
		}
		stress_impact = {
			impatient = medium_stress_impact_gain
		}
		custom_tooltip = do_not_execute_murder_tooltip
	}
}


#Setup for hired thugs
murder_outcome.1002 = {
	title = murder_outcome.1002.t
	desc = murder_outcome.1002.d
	theme = murder_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		#Will have been set by murder_outcome.0001 or a special setup event.
		scope:murder_method = flag:hired_thugs
	}

	immediate = {
		murder_outcome_roll_setup_effect = yes
	}

	option = {
		name = murder_outcome.1002.a
		murder_outcome_roll_effect = yes
		stress_impact = {
			greedy = minor_stress_impact_gain
			compassionate = medium_stress_impact_gain
			honest = minor_stress_impact_gain
		}
	}

	option = {
		name = murder_outcome.1002.b
		ai_chance = {
			base = 0
		}
		stress_impact = {
			impatient = medium_stress_impact_gain
			compassionate = minor_stress_impact_loss
			arrogant = medium_stress_impact_gain
		}
		scope:scheme = {
			add_scheme_progress = decline_execution_setback
		}
		custom_tooltip = do_not_execute_murder_tooltip
	}
}

#Setup for poison
murder_outcome.1003 = {
	title = murder_outcome.1003.t
	desc = murder_outcome.1003.d
	theme = murder_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		#Will have been set by murder_outcome.0001 or a special setup event.
		scope:murder_method = flag:used_poison
	}

	immediate = {
		murder_outcome_roll_setup_effect = yes
	}

	option = {
		name = murder_outcome.1003.a
		murder_outcome_roll_effect = yes
		stress_impact = {
			gluttonous = minor_stress_impact_gain
			craven = minor_stress_impact_loss
			paranoid = medium_stress_impact_gain
		}
	}

	option = {
		name = murder_outcome.1003.b
		ai_chance = {
			base = 0
		}
		stress_impact = {
			impatient = medium_stress_impact_gain
		}
		scope:scheme = {
			add_scheme_progress = decline_execution_setback
		}
		custom_tooltip = do_not_execute_murder_tooltip
	}
}


#Setup for creepy-crawly
murder_outcome.1004 = {
	title = murder_outcome.1004.t
	desc = murder_outcome.1004.desc
	theme = murder_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:creepy_crawly
	}

	immediate = {
		murder_outcome_roll_setup_effect = yes
	}

	option = {
		name = murder_outcome.1004.a
		murder_outcome_roll_effect = yes
		stress_impact = {
			arbitrary = minor_stress_impact_loss
			compassionate = medium_stress_impact_gain
			gregarious = minor_stress_impact_gain
		}
	}

	option = {
		name = murder_outcome.1004.b
		ai_chance = {
			base = 0
		}
		scope:scheme = {
			add_scheme_progress = decline_execution_setback
		}
		stress_impact = {
			impatient = major_stress_impact_gain
		}
		custom_tooltip = do_not_execute_murder_tooltip
	}
}


#Setup for a riled-up mob
murder_outcome.1005 = {
	title = murder_outcome.1005.t
	desc = murder_outcome.1005.desc
	theme = murder_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:riled_up_mob
	}

	immediate = {
		murder_outcome_roll_setup_effect = yes
		scope:target.capital_province.barony = {
			save_scope_as = home_province
		}
	}

	option = {
		name = murder_outcome.1005.a
		murder_outcome_roll_effect = yes
		stress_impact = {
			arbitrary = minor_stress_impact_loss
			compassionate = medium_stress_impact_gain
			gregarious = minor_stress_impact_gain
		}
	}

	option = {
		name = murder_outcome.1005.b
		ai_chance = {
			base = 0
		}
		scope:scheme = {
			add_scheme_progress = decline_execution_setback
		}
		stress_impact = {
			impatient = major_stress_impact_gain
		}
		custom_tooltip = do_not_execute_murder_tooltip
	}
}


#####################################
# CHILD MURDER SETUP 1200 - 1299
#####################################
##########################
# Lure Target Into Forest
##########################

murder_outcome.1201 = {
	title = murder_outcome.1201.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:acting_agent
				}
				desc = murder_outcome.1201.desc
			}
			desc = murder_outcome.1201.no_acting_agent
		}
	}
	theme = murder_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:lured_into_forest
	}

	immediate = {
		murder_outcome_roll_setup_effect = yes
		scope:scheme = {
			if = {
				limit = {
					any_scheme_agent = {
						scope:scheme = {
							NOT = {is_scheme_agent_exposed = prev }
						}
					}
				}
				random_scheme_agent = {
					save_scope_as = acting_agent
				}
			}
			else = {
				random_dummy_gender_effect = yes
			}
		}
	}

	option = {
		name = murder_outcome.1201.a
		custom_tooltip = murder_child_really_tooltip
		murder_outcome_roll_effect = yes
	}

	option = {
		name = murder_outcome.1201.b
		ai_chance = {
			base = 0
		}
		scope:scheme = {
			add_scheme_progress = decline_execution_setback
		}
		custom_tooltip = do_not_execute_murder_tooltip
	}
}

##########################
# Infant Stabbed to Death
##########################

murder_outcome.1202 = {
	title = murder_outcome.1202.t
	desc = murder_outcome.1202.desc
	theme = murder_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:stab_infant
	}

	immediate = {
		murder_outcome_roll_setup_effect = yes
		random_dummy_gender_effect = yes
	}

	option = {
		name = murder_outcome.1202.a
		remove_short_term_gold = medium_gold_value
		custom_tooltip = murder_child_really_tooltip
		murder_outcome_roll_effect = yes
	}

	option = {
		name = murder_outcome.1202.b
		ai_chance = {
			base = 0
		}
		custom_tooltip = do_not_execute_murder_tooltip
		scope:scheme = {
			add_scheme_progress = decline_execution_setback
		}
	}
}


##########################
# Infant bitten by creepy crawly
##########################

murder_outcome.1203 = {
	title = murder_outcome.1202.t
	desc = murder_outcome.1203.desc
	theme = murder_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:murder_method = flag:infant_creepy_crawly
	}

	immediate = {
		murder_outcome_roll_setup_effect = yes
		random_dummy_gender_effect = yes
	}

	option = {
		name = murder_outcome.1202.a
		remove_short_term_gold = medium_gold_value
		custom_tooltip = murder_child_really_tooltip
		murder_outcome_roll_effect = yes
	}

	option = {
		name = murder_outcome.1202.b
		ai_chance = {
			base = 0
		}
		custom_tooltip = do_not_execute_murder_tooltip
		scope:scheme = {
			add_scheme_progress = decline_execution_setback
		}
	}
}


###################################
# PRISON MURDER SETUP 1301-1399
###################################

#Beat to death in their cell
murder_outcome.1301 = {
	title = murder_outcome.1301.t
	desc = murder_outcome.1301.desc
	left_portrait = scope:target
	theme = murder_scheme
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		#Will have been set by murder_outcome.0301 or a special setup event.
		scope:murder_method = flag:beat_to_death_in_dungeon
	}

	immediate = {
		murder_outcome_roll_setup_effect = yes
		scope:scheme.scheme_target.imprisoner = {
			save_scope_as = prison_owner
		}
	}

	option = {
		name = murder_outcome.1301.a
		murder_outcome_roll_effect = yes
		stress_impact = {
			arbitrary = minor_stress_impact_loss
			compassionate = medium_stress_impact_gain
			gregarious = minor_stress_impact_gain
			just = medium_stress_impact_gain
		}
	}

	option = {
		name = murder_outcome.1301.b
		ai_chance = {
			base = 0
		}
		scope:scheme = {
			add_scheme_progress = decline_execution_setback
		}
		stress_impact = {
			impatient = medium_stress_impact_gain
			stubborn = minor_stress_impact_gain
		}
		custom_tooltip = do_not_execute_murder_tooltip
	}
}

#Unwelcome Guest in House Arrest
murder_outcome.1302 = {
	title = murder_outcome.1302.t
	desc = {
		desc = murder_outcome.1302.desc
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:target_home }
				desc = murder_outcome.1302.home_court_exists
			}
			desc = murder_outcome.1302.home_court_does_not_exists
		}
		desc = murder_outcome.1302.end
	}
	left_portrait = scope:target
	theme = murder_scheme
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		#Will have been set by murder_outcome.0301 or a special setup event.
		scope:murder_method = flag:unwelcome_guest_house_arrest
	}

	immediate = {
		murder_outcome_roll_setup_effect = yes
		scope:scheme.scheme_target.imprisoner = {
			save_scope_as = prison_owner
		}
		random_dummy_gender_effect = yes
	}

	option = {
		name = murder_outcome.1302.a
		murder_outcome_roll_effect = yes
		stress_impact = {
			arbitrary = minor_stress_impact_loss
			compassionate = medium_stress_impact_gain
			gregarious = minor_stress_impact_gain
			just = medium_stress_impact_gain
		}
	}

	option = {
		name = murder_outcome.1302.b
		ai_chance = {
			base = 0
		}
		scope:scheme = {
			add_scheme_progress = decline_execution_setback
		}
		stress_impact = {
			impatient = medium_stress_impact_gain
			stubborn = minor_stress_impact_gain
		}
		custom_tooltip = do_not_execute_murder_tooltip
	}
}


##############################
# Various Special Murders
# 1401-1499
##############################

#Strangling Incapable
murder_outcome.1401 = {
	title = murder_outcome.1401.t
	desc = murder_outcome.1401.desc
	theme = murder_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		#Will have been set by murder_outcome.0001 or a special setup event.
		scope:murder_method = flag:strangle_incapable
	}

	immediate = {
		murder_outcome_roll_setup_effect = yes
	}

	option = {
		name = murder_outcome.1401.a
		murder_outcome_roll_effect = yes
		stress_impact = {
			gluttonous = minor_stress_impact_gain
			craven = minor_stress_impact_loss
			paranoid = medium_stress_impact_gain
		}
	}

	option = {
		name = murder_outcome.1401.b
		ai_chance = {
			base = 0
		}
		stress_impact = {
			impatient = medium_stress_impact_gain
		}
		scope:scheme = {
			add_scheme_progress = decline_execution_setback
		}
		custom_tooltip = do_not_execute_murder_tooltip
	}
}


#####################################
# SUCCESSFUL OUTCOME 2000 - 2999
#####################################


########################
# Target was already dead
# by Linnéa Thimrén
########################

murder_outcome.2000 = {
	type = character_event
	title = murder_outcome.2000.t
	desc = murder_outcome.2000.desc
	theme = murder_scheme

	left_portrait = scope:target

	trigger = {
		scope:target = { is_alive = no }
	}

	immediate = {
		custom_tooltip = murder_outcome.2000.a.tt
	}

	option = {
		name = murder_outcome.2000.a
	}
}


########################
# Hired an assassin
########################
murder_outcome.2001 = {
	type = character_event
	title = murder_outcome.2001.t

			### START DESC
	desc = {
		# Open with a statement celebrating success
		# Remember to name the Target character
		random_valid = {
			desc = murder_outcome.2001.opening_1
			desc = murder_outcome.2001.opening_2
			desc = murder_outcome.2001.opening_3
		}
		triggered_desc = {
			# Additional comment if you're sadistic.
			trigger = {
				has_trait = sadistic
			}
			desc = murder_outcome.2001.heh
		}

		first_valid = {
			# If the Scheme Owner is known:
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = {
					random_valid = {
						desc = murder_outcome.2001.owner_is_known_1
						desc = murder_outcome.2001.owner_is_known_2
					#	desc = # I am known 3
					}
				}
			}
			desc = {
				random_valid = {
					desc = murder_outcome.2001.no_awareness_1
					desc = murder_outcome.2001.no_awareness_2
				#	desc = # Nothing is known 3
				}
			}
		}
	}

	### END OF DESC

	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = pain
	}

	trigger = {
		scope:murder_method = flag:hired_assassin
	}

	immediate = {
		murder_success_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.2001.a.discovered
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
			}
			text = murder_outcome.2001.a
		}
		successful_murder_outcome_event_option_effect = yes
	}
}



##########################
# Hired a gang of thugs
##########################
murder_outcome.2002 = {
	type = character_event
	title = murder_outcome.2002.t

			### START DESC
	desc = {
		# Open with a statement celebrating success
		# Remember to name the Target character
		random_valid = {
			desc = murder_outcome.2002.opening_1
			desc = murder_outcome.2002.opening_2
			desc = murder_outcome.2002.opening_3
		}
		triggered_desc = {
			# Additional comment if you're sadistic.
			trigger = {
				has_trait = sadistic
			}
			desc = murder_outcome.2002.heh
		}

		desc = murder_outcome.2002.no_save

		first_valid = {
			# If the Scheme Owner is known:
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = {
					random_valid = {
						desc = murder_outcome.2002.owner_is_known_1
						desc = murder_outcome.2002.owner_is_known_2
					}
				}
			}
			desc = {
				random_valid = {
					desc = murder_outcome.2002.no_awareness_1
					desc = murder_outcome.2002.no_awareness_2
				}
			}
		}
	}
	### END OF DESC

	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = pain
	}

	trigger = {
		scope:murder_method = flag:hired_thugs
	}

	immediate = {
		murder_success_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.2002.a.discovered
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
				NOR = {
					has_trait = humble
					has_trait = compassionate
					has_trait = content
				}
			}
			text = murder_outcome.2002.a
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
				OR = {
					has_trait = humble
					has_trait = compassionate
					has_trait = content
				}
			}
			text = murder_outcome.2002.a.less_arrogant
		}
		successful_murder_outcome_event_option_effect = yes
	}
}

######################
# Poisoning
######################
murder_outcome.2003 = {
	type = character_event
	title = murder_outcome.2003.t
	### START DESC
	desc = {
		# Open with a statement celebrating success
		# Remember to name the Target character
		random_valid = {
			desc = murder_outcome.2003.opening_1
			desc = murder_outcome.2003.opening_2
			desc = murder_outcome.2003.opening_3
		}
		triggered_desc = {
			# Additional comment if you're sadistic.
			trigger = {
				has_trait = sadistic
			}
			desc = murder_outcome.2001.heh
		}

		first_valid = {
			# If the Scheme Owner is known:
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = {
					random_valid = {
						desc = murder_outcome.2003.owner_is_known_1
						desc = murder_outcome.2003.owner_is_known_2
						desc = murder_outcome.2003.owner_is_known_3
					}
				}
			}

			# If the Scheme Owner is not known:
			desc = {
				random_valid = {
					desc = murder_outcome.2003.no_awareness_1
					desc = murder_outcome.2003.no_awareness_2
				}
			}
		}
	}
	### END OF DESC
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = pain
	}


	trigger = {
		scope:murder_method = flag:used_poison
	}

	immediate = {
		murder_success_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.2003.a.discovered_1
		}
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.2003.a.discovered_2
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
			}
			text = murder_outcome.2003.a
		}
		successful_murder_outcome_event_option_effect = yes
	}
}


##########################
# Creepy-Crawly
#########################
murder_outcome.2004 = {
	type = character_event
	title = murder_outcome.1004.t
	### START DESC
	desc = {
		# Open with a statement celebrating success
		# Remember to name the Target character
		random_valid = {
			desc = murder_outcome.2004.opening_1
		}
		triggered_desc = {
			# Additional comment if you're sadistic.
			trigger = {
				has_trait = sadistic
			}
			desc = murder_outcome.2001.heh
		}
		first_valid = {
			# If the Scheme Owner is known:
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = {
					random_valid = {
						desc = murder_outcome.2004.owner_is_known_1
					}
				}
			}
			# If the Scheme Owner is not known:
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = {
							scope:venomous_creature = flag:beaked_mammal
						}
						desc = murder_outcome.2004.no_awareness_1_beaked_mammal
					}
					random_valid = {
						desc = murder_outcome.2004.no_awareness_1
					}
				}
			}
		}
	}

	### END OF DESC

	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = pain
	}

	trigger = {
		scope:murder_method = flag:creepy_crawly
	}

	immediate = {
		murder_success_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.2004.a.discovered
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
			}
			text = murder_outcome.2004.a
		}
		successful_murder_outcome_event_option_effect = yes
	}
}


##########################
# Riled-up Mob
#########################
murder_outcome.2005 = {
	type = character_event
	title = murder_outcome.1005.t
	### START DESC
	desc = {
		# Open with a statement celebrating success
		# Remember to name the Target character
		random_valid = {
			desc = murder_outcome.2005.opening_1
		}
		triggered_desc = {
			# Additional comment if you're sadistic.
			trigger = {
				has_trait = sadistic
			}
			desc = murder_outcome.2001.heh
		}

		first_valid = {
			# If the Scheme Owner is known:
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = {
					random_valid = {
						desc = murder_outcome.2005.owner_is_known_1
					}
				}
			}
			desc = {
				random_valid = {
					desc = murder_outcome.2005.no_awareness_1
				}
			}
		}
	}
	### END OF DESC
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = pain
	}

	trigger = {
		scope:murder_method = flag:riled_up_mob
	}

	immediate = {
		murder_success_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
				NOR = {
					has_trait = humble
					has_trait = compassionate
				}
			}
			text = murder_outcome.2005.a.discovered
		}
		name = {
			trigger = {
				exists = scope:scheme_discovered
				OR = {
					has_trait = humble
					has_trait = compassionate
				}
			}
			text = murder_outcome.2005.a.discovered.less_arrogant
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
			}
			text = murder_outcome.2005.a
		}
		successful_murder_outcome_event_option_effect = yes
	}
}


###############################
# Left Child in Forest
###############################
murder_outcome.2201 = {
	type = character_event
	title = murder_outcome.2201.t
	desc = {
		desc = murder_outcome.2201.opening
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = murder_outcome.2201.scheme_owner_known
			}
			desc = murder_outcome.2201.scheme_unknown
		}
	}
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = pain
	}


	trigger = {
		scope:murder_method = flag:lured_into_forest
	}

	immediate = {
		murder_success_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.2201.a.discovered
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
			}
			text = murder_outcome.2201.a
		}
		successful_murder_outcome_event_option_effect = yes
		stress_impact = {
			base = medium_stress_gain
			compassionate = major_stress_impact_gain
		}
	}
}

###############################
# Infant Stabbed to Death
###############################
murder_outcome.2202 = {
	type = character_event
	title = murder_outcome.1202.t
	desc = {
		desc = murder_outcome.2202.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					has_trait = sadistic
				}
				desc = murder_outcome.2202.desc_sadistic
			}
			desc = murder_outcome.2202.desc_normal
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = murder_outcome.2202.scheme_owner_known
			}
			desc = murder_outcome.2202.scheme_unknown
		}
	}
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = pain
	}


	trigger = {
		scope:murder_method = flag:stab_infant
	}

	immediate = {
		murder_success_effect = yes
	}

	option = {
		name = murder_outcome.2202.a
		successful_murder_outcome_event_option_effect = yes
		stress_impact = {
			base = medium_stress_gain
			compassionate = major_stress_impact_gain
		}
	}

	option = {
		name = murder_outcome.2202.a.sadistic
		trigger = {
			has_trait = sadistic
		}
		trait = sadistic
		exclusive = yes
		
		successful_murder_outcome_event_option_effect = yes
		stress_impact = {
			base = minor_stress_loss
		}
	}
}


###############################
# Infant bitten by creepy crawly
###############################
murder_outcome.2203 = {
	type = character_event
	title = murder_outcome.1202.t
	desc = {
		desc = murder_outcome.2203.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = murder_outcome.2203.scheme_owner_known
			}
			desc = murder_outcome.2203.scheme_unknown
		}
	}
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = pain
	}

	trigger = {
		scope:murder_method = flag:infant_creepy_crawly
	}

	immediate = {
		murder_success_effect = yes
	}

	option = {
		name = murder_outcome.2202.a
		successful_murder_outcome_event_option_effect = yes
		stress_impact = {
			base = medium_stress_gain
			compassionate = major_stress_impact_gain
		}
	}

	option = {
		name = murder_outcome.2202.a.sadistic
		trigger = {
			has_trait = sadistic
		}
		trait = sadistic
		exclusive = yes
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			add_dread = major_dread_gain
		}
		successful_murder_outcome_event_option_effect = yes
		stress_impact = {
			base = minor_stress_loss
		}
	}
}

#############################
# Successful Prison Murders
# 2301 - 2399
#############################

#Beaten to death in prison
murder_outcome.2301 = {
	type = character_event
	title = murder_outcome.2301.t

	### START DESC
	desc = {
		# Open with a statement celebrating success
		# Remember to name the Target character
		random_valid = {
			desc = murder_outcome.2301.opening_1
		}
		triggered_desc = {
			# Additional comment if you're sadistic.
			trigger = {
				has_trait = sadistic
			}
			desc = murder_outcome.2301.heh
		}

		first_valid = {
			# If the Scheme Owner is known:
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = {
					random_valid = {
						desc = murder_outcome.2301.owner_is_known_1
					}
				}
			}
			desc = {
				random_valid = {
					desc = murder_outcome.2301.no_awareness_1
				}
			}
		}
	}
	### END OF DESC
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = pain
	}

	trigger = {
		scope:murder_method = flag:beat_to_death_in_dungeon
	}

	immediate = {
		murder_success_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.2301.a.discovered
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
			}
			text = murder_outcome.2301.a
		}
		successful_murder_outcome_event_option_effect = yes
	}
}

#############################
#Unwelcome Guest - House Arrest
#############################
murder_outcome.2302 = {
	type = character_event
	title = murder_outcome.2302.t

	### START DESC
	desc = {
		# Open with a statement celebrating success
		# Remember to name the Target character
		random_valid = {
			desc = murder_outcome.2302.opening_1
		}
		triggered_desc = {
			# Additional comment if you're sadistic.
			trigger = {
				has_trait = sadistic
			}
			desc = murder_outcome.2001.heh
		}
		first_valid = {
			# If the Scheme Owner is known:
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = {
					random_valid = {
						desc = murder_outcome.2302.owner_is_known_1
					}
				}
			}
			desc = {
				random_valid = {
					desc = murder_outcome.2302.no_awareness_1
				}
			}
		}
	}
	### END OF DESC
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = pain
	}

	trigger = {
		scope:murder_method = flag:unwelcome_guest_house_arrest
	}

	immediate = {
		murder_success_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.2302.a.discovered
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
			}
			text = murder_outcome.2302.a
		}
		successful_murder_outcome_event_option_effect = yes
	}
}


##########################
# Various Special Murders
# 2401-2499
##########################

#Strangling Incapable
murder_outcome.2401 = {
	type = character_event
	title = murder_outcome.1401.t
	### START DESC
	desc = {
		# Open with a statement celebrating success
		# Remember to name the Target character
		random_valid = {
			desc = murder_outcome.2401.opening_1
		}
		triggered_desc = {
			# Additional comment if you're sadistic.
			trigger = {
				has_trait = sadistic
			}
			desc = murder_outcome.2001.heh
		}
		first_valid = {
			# If the Scheme Owner is known:
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = {
					random_valid = {
						desc = murder_outcome.2401.owner_is_known_1
					}
				}
			}
			desc = {
				random_valid = {
					desc = murder_outcome.2401.no_awareness_1
				}
			}
		}
	}
	### END OF DESC
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = pain
	}

	trigger = {
		scope:murder_method = flag:strangle_incapable
	}

	immediate = {
		murder_success_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.2401.a.discovered
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
			}
			text = murder_outcome.2401.a
		}
		successful_murder_outcome_event_option_effect = yes
	}
}



###############################
# FAILURE OUTCOMES 4000 - 4999
###############################

#######################
# Hired Assassin
#######################
murder_outcome.4001 = {
	type = character_event
	title = murder_outcome.4001.t
		### START DESC
		desc = {
		
			# Start off with declaration of failure
			# Include Target's name!
			random_valid = {
				desc = murder_outcome.4001.failure_declaration_1
				desc = murder_outcome.4001.failure_declaration_2
				desc = murder_outcome.4001.failure_declaration_3
			}
		
			desc = murder_outcome.4001.desc

			first_valid = {
				triggered_desc = {
					trigger = {
						exists = scope:scheme_discovered
					}
					desc = murder_outcome.4001.exposed_scheme
				}
				desc = murder_outcome.4001.not_exposed_scheme
			}
		}
	### END DESC
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}

	trigger = {
		scope:murder_method = flag:hired_assassin
	}

	immediate = {
		random_dummy_gender_assassin_effect = yes
		murder_failure_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.4001.a.discovered
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
			}
			text = murder_outcome.4001.a
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
		}
	}

	option = {
		name = murder_outcome.4001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}


###########################
# HIRED THUGS
###########################

murder_outcome.4002 = {
	type = character_event
	title = murder_outcome.1002.t
	### START DESC
	desc = {
		# Start off with declaration of failure
		# Include Target's name!
		random_valid = {
			desc = murder_outcome.4001.failure_declaration_1
			desc = murder_outcome.4001.failure_declaration_2
			desc = murder_outcome.4001.failure_declaration_3
		}
	
		desc = murder_outcome.4002.desc

		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = murder_outcome.4002.exposed_scheme
			}
			desc = murder_outcome.4002.not_exposed_scheme
		}
	}
	### END DESC
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}

	trigger = {
		scope:murder_method = flag:hired_thugs
	}

	immediate = {
		murder_failure_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.4002.a.discovered
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
				NOT = {
					has_trait = humble
				}
			}
			text = murder_outcome.4002.a
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
				has_trait = humble
			}
			text = murder_outcome.4002.a.less_arrogant
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
		}
	}

	option = {
		name = murder_outcome.4001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}


###########################
# USED POISON
###########################

murder_outcome.4003 = {
	type = character_event
	title = murder_outcome.1003.t
	### START DESC
	desc = {
		# Start off with declaration of failure
		# Include Target's name!
		random_valid = {
			desc = murder_outcome.4001.failure_declaration_1
			desc = murder_outcome.4001.failure_declaration_2
			desc = murder_outcome.4001.failure_declaration_3
		}
	
		desc = murder_outcome.4003.desc

		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = murder_outcome.4003.exposed_scheme
			}
			desc = murder_outcome.4003.not_exposed_scheme
		}
	}
	### END DESC
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}

	trigger = {
		scope:murder_method = flag:used_poison
	}

	immediate = {
		murder_failure_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.4003.a.discovered
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
			}
			text = murder_outcome.4003.a
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
		}
	}

	option = {
		name = murder_outcome.4001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}


#########################
# Creepy-crawlies
#########################
murder_outcome.4004 = {
	type = character_event
	title = murder_outcome.1004.t
	### START DESC
	desc = {
	
		# Start off with declaration of failure
		# Include Target's name!
		random_valid = {
			desc = murder_outcome.4004.failure_declaration_1
		}
	
		first_valid = {
			# "Regular" scheme execution
			desc = {
				desc = murder_outcome.4004.failed_attempt_1
				first_valid = {
					triggered_desc = {
						trigger = {
							exists = scope:scheme_discovered
						}
						desc = murder_outcome.4004.scheme_owner_known
					}
					desc = murder_outcome.4004.scheme_known
				}
			}
		}
	}
	### END DESC
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}
	
	trigger = {
		scope:murder_method = flag:creepy_crawly
	}

	immediate = {
		murder_failure_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.2004.a.discovered
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
			}
			text = murder_outcome.4004.a
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
		}
	}

	option = {
		name = murder_outcome.4001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}



#########################
# Riled-up Mob
#########################
murder_outcome.4005 = {
	type = character_event
	title = murder_outcome.1005.t
	### START DESC
	desc = {
	
		# Start off with declaration of failure
		# Include Target's name!
		random_valid = {
			desc = murder_outcome.4005.failure_declaration_1
		}
	
		first_valid = {
			# "Regular" scheme execution
			desc = {
				desc = murder_outcome.4005.failed_attempt_1
				first_valid = {
					triggered_desc = {
						trigger = {
							exists = scope:scheme_discovered
						}
						desc = murder_outcome.4005.scheme_owner_known
					}
					desc = murder_outcome.4005.scheme_unknown
				}
			}
		}
	}
	### END DESC
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}

	trigger = {
		scope:murder_method = flag:riled_up_mob
	}

	immediate = {
		murder_failure_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.4005.a.discovered
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
			}
			text = murder_outcome.4005.a
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
		}
	}

	option = {
		name = murder_outcome.4001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}


##########################
# Lured Child Into Forest
##########################
murder_outcome.4201 = {
	type = character_event
	title = murder_outcome.4201.t
	desc = {
		random_valid = {
			desc = murder_outcome.4001.failure_declaration_1
			desc = murder_outcome.4001.failure_declaration_2
			desc = murder_outcome.4001.failure_declaration_3
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = murder_outcome.4201.scheme_owner_known
			}
			desc = murder_outcome.4201.scheme_unknown
		}
	}
	
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}

	trigger = {
		scope:murder_method = flag:lured_into_forest
	}

	immediate = {
		murder_failure_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.4201.a.discovered
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
			}
			text = murder_outcome.4201.a
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
		}
	}

	option = {
		name = murder_outcome.4001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}

##########################
# Stabbed Infant
##########################
murder_outcome.4202 = {
	type = character_event
	title = murder_outcome.1202.t
	desc = {
		desc = murder_outcome.4202.opening
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = murder_outcome.4202.scheme_owner_known
			}
			desc = murder_outcome.4202.scheme_unkown
		}
	}
	
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}

	trigger = {
		scope:murder_method = flag:stab_infant
	}

	immediate = {
		murder_failure_effect = yes
	}

	option = {
		name = murder_outcome.4202.a
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
		}
	}

	option = {
		name = murder_outcome.4001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}


##########################
# Infant bitten by creepy crawly
##########################
murder_outcome.4203 = {
	type = character_event
	title = murder_outcome.1202.t
	desc = {
		desc = murder_outcome.4203.opening
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
				}
				desc = murder_outcome.4203.scheme_owner_known
			}
			desc = murder_outcome.4203.scheme_unkown
		}
	}
	
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}

	trigger = {
		scope:murder_method = flag:infant_creepy_crawly
	}

	immediate = {
		murder_failure_effect = yes
	}

	option = {
		name = murder_outcome.4202.a
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
		}
	}

	option = {
		name = murder_outcome.4001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}

####################################
# Prison Murder Failures
# 4301-4399
####################################

#Beaten to death in a cell
murder_outcome.4301 = {
	type = character_event
	title = murder_outcome.4301.t
	### START DESC
	desc = {
	
		# Start off with declaration of failure
		# Include Target's name!
		random_valid = {
			desc = murder_outcome.4301.failure_declaration_1
		}
	
		first_valid = {
			# "Regular" scheme execution
			first_valid = {
				triggered_desc = {
					trigger = {
						exists = scope:scheme_discovered
					}
					desc = murder_outcome.4301.disastrous_attempt_1
				}
				desc = {
					desc = murder_outcome.4301.failed_attempt_1
					desc = murder_outcome.4301.unknown_so_far
				}
			}
		}
	}
	### END DESC


	
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}

	trigger = {
		scope:murder_method = flag:beat_to_death_in_dungeon
	}

	immediate = {
		murder_failure_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.4301.a.discovered
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
			}
			text = murder_outcome.4301.a
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
		}
	}

	option = {
		name = murder_outcome.4001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}

#An Unwelcome Guest
murder_outcome.4302 = {
	type = character_event
	title = murder_outcome.4302.t
	### START DESC
	desc = {
	
		# Start off with declaration of failure
		# Include Target's name!
		random_valid = {
			desc = murder_outcome.4302.failure_declaration_1
		}
	
		first_valid = {
			# "Regular" scheme execution
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = {
							scope:scheme = {
								scheme_progress < 100
							}
						}
						desc = murder_outcome.4302.failed_lack_of_planning
					}
					desc = murder_outcome.4302.failed_attempt_1
				}
				first_valid = {
					triggered_desc = {
						trigger = {
							exists = scope:scheme_discovered
						}
						desc = murder_outcome.4302.disastrous_attempt_1
					}
					desc = murder_outcome.4302.unknown_so_far
				}
			}
		}
	}
	### END DESC


	
	theme = murder_scheme
	left_portrait = {
		character = scope:target
		animation = shock
	}

	trigger = {
		scope:murder_method = flag:unwelcome_guest_house_arrest
	}

	immediate = {
		murder_failure_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = murder_outcome.4302.a.discovered
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
			}
			text = murder_outcome.4302.a
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = minor_dread_gain
			}
		}
	}

	option = {
		name = murder_outcome.4001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}



##########################
# Various Special Murders
# 4401-4499
##########################

#Strangle Incapable
murder_outcome.4401 = {
	type = character_event
	title = murder_outcome.1401.t
	### START DESC
	desc = {
	
		# Start off with declaration of failure
		# Include Target's name!
		random_valid = {
			desc = murder_outcome.4401.failure_declaration_1
		}
	
		first_valid = {
			# "Regular" scheme execution
			desc = {
				desc = murder_outcome.4401.failed_attempt_1
				first_valid = {
					triggered_desc = {
						trigger = {
							exists = scope:scheme_discovered
						}
						desc = murder_outcome.4401.disastrous_attempt_1
					}
					desc = murder_outcome.4401.unknown_so_far
				}
			}
		}
	}
	### END DESC

	theme = murder_scheme
	left_portrait = scope:target

	trigger = {
		scope:murder_method = flag:strangle_incapable
	}

	immediate = {
		murder_failure_effect = yes
	}

	option = {
		name = murder_outcome.4401.a
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = minor_dread_gain
			}
		}
	}

	option = {
		name = murder_outcome.4001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = minor_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
	}

	after = {
		hidden_effect = {
			trigger_event = murder_outcome.9999
		}
	}
}


############################################
# YOU GOT (ATTEMPTED?) MURDERED 5000 - 5999
############################################

#You've been killed
murder_outcome.5001 = {
	type = character_event
	title = murder_outcome.5001.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:used_poison
				}
				desc = murder_outcome.5001.poisoned_duck
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:hired_thugs
				}
				desc = murder_outcome.5001.gang_of_thugs
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:hired_assassin
				}
				desc = murder_outcome.5001.hired_assassin
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:creepy_crawly
				}
				desc = {
					desc = murder_outcome.5001.creepy_crawly_intro
					first_valid = {
						triggered_desc = {
							trigger = {
								OR = {
									learning > 8
									has_trait = lifestyle_hunter
								}
							}
							desc = murder_outcome.5001.creepy_crawly_known
						}
						desc = murder_outcome.5001.creepy_crawly_unknown
					}
					desc = murder_outcome.5001.creepy_crawly_end
				}
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:riled_up_mob
				}
				desc = murder_outcome.5001.riled_up_mob
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:lured_into_forest
				}
				desc = {
					first_valid = {
						triggered_desc = {
							trigger = { exists = scope:acting_agent }
							desc = murder_outcome.5001.acting_agent
						}
						desc = murder_outcome.5001.courtier
					}
					desc = murder_outcome.5001.lured_into_forest
				}
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:stab_infant
				}
				desc = murder_outcome.5001.stab_infant
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:infant_creepy_crawly
				}
				desc = murder_outcome.5001.infant_creepy_crawly
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:beat_to_death_in_dungeon
				}
				desc = murder_outcome.5001.beat_to_death_in_dungeon
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:unwelcome_guest_house_arrest
				}
				desc = {
					desc = murder_outcome.5001.unwelcome_guest_house_arrest
					first_valid = {
						triggered_desc = {
							trigger = { exists = scope:target_home }
							desc = murder_outcome.5001.unwelcome_guest_house_arrest.target_court
						}
						desc = murder_outcome.5001.unwelcome_guest_house_arrest.no_court
					}
					desc = murder_outcome.5001.unwelcome_guest_house_arrest.end
				}
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:strangle_incapable
				}
				desc = murder_outcome.5001.strangle_incapable
			}
		}
		triggered_desc = {
			trigger = {
				exists = scope:scheme_discovered
				NOT = {
					has_trait = incapable #No notification of identity for Incapable characters
				}
			}
			desc = murder_outcome.5001.schemer_known
		}
	}
	theme = murder_scheme
	left_portrait = {
		character = scope:owner_to_reveal
		animation = schadenfreude
	}

	immediate = {
		murder_success_kill_effect = yes
	}

	option = {
		name = murder_outcome.5001.avenge_me
		trigger = {
			exists = scope:scheme_discovered
			is_adult = yes
		}
	}

	option = {
		name = murder_outcome.5001.not_my_time
		trigger = {
			OR = {
				NOT = { exists = scope:scheme_discovered }
				scope:target = { is_adult = no }
			}
		}
		exclusive = yes
	}

	option = {
		name = murder_outcome.5001.option_incapable
		trigger = {
			scope:target = { has_trait = incapable }
		}
		exclusive = yes
	}
}

#You've survived a murder attempt
murder_outcome.5002 = {
	title = murder_outcome.5002.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:used_poison
				}
				desc = murder_outcome.5002.poisoned_duck
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:hired_thugs
				}
				desc = murder_outcome.5002.gang_of_thugs
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:hired_assassin
				}
				desc = murder_outcome.5002.hired_assassin
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:creepy_crawly
				}
				desc = {
					desc = murder_outcome.5001.creepy_crawly_intro
					first_valid = {
						triggered_desc = {
							trigger = {
								OR = {
									learning > 8
									has_trait = lifestyle_hunter
								}
							}
							desc = murder_outcome.5001.creepy_crawly_known
						}
						desc = murder_outcome.5001.creepy_crawly_unknown
					}
					desc = murder_outcome.5002.creepy_crawly_end
				}
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:riled_up_mob
				}
				desc = murder_outcome.5002.riled_up_mob
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:lured_into_forest
				}
				desc = murder_outcome.5002.lured_into_forest
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:stab_infant
				}
				desc = murder_outcome.5002.stab_infant
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:infant_creepy_crawly
				}
				desc = murder_outcome.5002.infant_creepy_crawly
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:beat_to_death_in_dungeon
				}
				desc = murder_outcome.5002.beat_to_death_in_dungeon
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:unwelcome_guest_house_arrest
				}
				desc = murder_outcome.5002.unwelcome_guest_house_arrest
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:strangle_incapable
				}
				desc = murder_outcome.5002.strangle_incapable
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:scheme_discovered
					NOT = { has_trait = incapable }
					age > 8
				}
				desc = murder_outcome.5002.schemer_known
			}
			desc = murder_outcome.5002.unkown_schemer		
		}
	}
	theme = murder_scheme
	left_portrait = {
		character = scope:owner_to_reveal
		animation = anger
	}

	option = {
		name = murder_outcome.5002.will_find_out
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}

	option = {
		name = murder_outcome.5002.revenge_will_be_had
		trigger = {
			exists = scope:scheme_discovered
		}
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}

	option = {
		name = murder_outcome.5002.child
		trigger = {
			is_adult = no
			age >= 2
		}
		exclusive = yes
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}

	option = {
		name = murder_outcome.5002.infant
		trigger = {
			age < 2
		}
		exclusive = yes
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}

	option = {
		name = murder_outcome.5002.option_incapable
		trigger = {
			has_trait = incapable
		}
		exclusive = yes
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}

	after = {
		if = {
			limit = {
				exists = scope:owner_to_reveal
			}
			attempted_murder_opinion_effect = {
				VICTIM = root
				MURDERER = scope:owner_to_reveal
			}
		}
	}
}


########################
# Scheme End Handling
########################
murder_outcome.9999 = {
	type = character_event
	hidden = yes

	immediate = {
		if = {
			limit = {
				exists = scope:restart_scheme
				exists = scope:scheme
			}
			scope:scheme = {
				add_scheme_progress = -10
			}
		}
		else_if = {
			limit = {
				exists = scope:scheme
				exists = scope:target
				scope:target = { is_alive = yes }
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}
